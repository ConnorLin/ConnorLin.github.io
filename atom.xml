<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ConnorLin&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/ConnorLin/"/>
  <updated>2016-05-07T11:18:21.000Z</updated>
  <id>https://github.com/ConnorLin/</id>
  
  <author>
    <name>ConnorLin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Studio Run app 报错</title>
    <link href="https://github.com/ConnorLin/2016/05/07/Android-Studio-Run-app-%E6%8A%A5%E9%94%99/"/>
    <id>https://github.com/ConnorLin/2016/05/07/Android-Studio-Run-app-报错/</id>
    <published>2016-05-07T11:13:18.000Z</published>
    <updated>2016-05-07T11:18:21.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;今天在码代码时遇到一个莫名其妙的问题，问题是这样的：&lt;/p&gt;
&lt;p&gt;不论 clean project、rebuild project 还是 make module 都能顺利执行，但是只要 Run app 就会报如下错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error:Execution failed for task &amp;apos;:app:transformClassesWithDexForDebug&amp;apos;.
&amp;gt; com.android.build.api.transform.TransformException: com.android.ide.common.process.ProcessException: org.gradle.process.internal.ExecException: Process &amp;apos;command &amp;apos;/home/connorlin/Program/jdk1.7.0_71/bin/java&amp;apos;&amp;apos; finished with non-zero exit value 134
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题分析&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;通常，看到 &lt;code&gt;with non-zero exit value 134&lt;/code&gt; 首先想到的是依赖冲突了，但细心点能发现，依赖冲突一般是&lt;code&gt;with non-zero exit value 1&lt;/code&gt; 或 &lt;code&gt;with non-zero exit value 2&lt;/code&gt;，此处却是&lt;code&gt;134&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;再看&lt;code&gt;Process &amp;#39;command &amp;#39;/home/connorlin/Program/jdk1.7.0_71/bin/java&amp;#39;&amp;#39; finished with non-zero exit value 134&lt;/code&gt; 似乎是JDK相关。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;那么，首先排除依赖冲突，因为之前是正常的，代码又没任何改动，是突然出现报错。再看到JDK，检查是否JDK配置出问题了，因为我同时装了&lt;code&gt;sun JDK&lt;/code&gt; 和 &lt;code&gt;OpenJDK&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;问题定位&quot;&gt;&lt;a href=&quot;#问题定位&quot; class=&quot;headerlink&quot; title=&quot;问题定位&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题定位&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;一次定位&quot;&gt;&lt;a href=&quot;#一次定位&quot; class=&quot;headerlink&quot; title=&quot;一次定位&quot;&gt;&lt;/a&gt;&lt;strong&gt;一次定位&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;开始查看java 版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果显示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java version &amp;quot;1.7.0_75&amp;quot;
OpenJDK Runtime Environment (IcedTea 2.5.4) (7u75-2.5.4-1~trusty1)
OpenJDK 64-Bit Server VM (build 24.75-b04, mixed mode)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再看：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;update-alternatives --config java
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果显示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;有 3 个候选项可用于替换 java (提供 /usr/bin/java)。

  选择       路径                                          优先级  状态
------------------------------------------------------------
  0            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1071      自动模式
* 1            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1071      手动模式
  2            /usr/local/jdk/bin/java                          255       手动模式
  3            /usr/local/jdk1.6.0_30/bin/java                  255       手动模式

要维持当前值[*]请按回车键，或者键入选择的编号：
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  证明JDK环境配置没错。&lt;/p&gt;
&lt;p&gt;  接着，把Android Studio JDK改为OpenJDK：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/home/connorlin/Program/jdk1.7.0_71
改为
/usr/lib/jvm/java-7-openjdk-amd64
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再次编译 Run app，再次报错，但本次报错与上次不一样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error:Failed to complete Gradle execution.
Cause:
Gradle build daemon disappeared unexpectedly (it may have been killed or may have crashed)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;居然&lt;code&gt;Gradle build daemon&lt;/code&gt; 异常，那肯定不是代码的问题了。&lt;/p&gt;
&lt;h3 id=&quot;二次定位&quot;&gt;&lt;a href=&quot;#二次定位&quot; class=&quot;headerlink&quot; title=&quot;二次定位&quot;&gt;&lt;/a&gt;&lt;strong&gt;二次定位&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;后来，无意中发现在项目跟路径下有多个类似&lt;code&gt;hs_err_pid11776.log&lt;/code&gt; 文件，其内容节选如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fcac7773d44, pid=11776, tid=140508865505024
#
# JRE version: OpenJDK Runtime Environment (7.0_75-b13) (build 1.7.0_75-b13)
# Java VM: OpenJDK 64-Bit Server VM (24.75-b04 mixed mode linux-amd64 compressed oops)
# Derivative: IcedTea 2.5.4
# Distribution: Ubuntu 14.04 LTS, package 7u75-2.5.4-1~trusty1
# Problematic frame:
# V  [libjvm.so+0x82ad44]  MoveAndUpdateClosure::do_addr(HeapWord*, unsigned long)+0xa4
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try &amp;quot;ulimit -c unlimited&amp;quot; before starting Java again
#
# If you would like to submit a bug report, please include
# instructions on how to reproduce the bug and visit:
#   http://icedtea.classpath.org/bugzilla
#

---------------  T H R E A D  ---------------

Current thread (0x00007fcac0023800):  GCTaskThread [stack: 0x00007fcac4f42000,0x00007fcac5043000] [id=11785]

siginfo:si_signo=SIGSEGV: si_errno=0, si_code=1 (SEGV_MAPERR), si_addr=0x00000000007d0038

Registers:
RAX=0x00000000007d0020, RBX=0x00007fcac5041cb0, RCX=0x0000000000000000, RDX=0x00000000007d0020
RSP=0x00007fcac5041ba0, RBP=0x00007fcac5041be0, RSI=0x00000000007d0020, RDI=0x00000000c47529c0
R8 =0x00007fcaa5800000, R9 =0x00007fcac7d0b420, R10=0x00000000030c9100, R11=0x00007fcac850f810
R12=0x0000000000000001, R13=0x0000000000000008, R14=0x00007fcac007abe0, R15=0x00000000c47529b8
RIP=0x00007fcac7773d44, EFLAGS=0x0000000000010202, CSGSFS=0x0000000000000033, ERR=0x0000000000000004
TRAPNO=0x000000000000000e
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过查看，其中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---------------  T H R E A D  ---------------

Current thread (0x00007fcac0023800):  GCTaskThread [stack: 0x00007fcac4f42000,0x00007fcac5043000] [id=11785]

siginfo:si_signo=SIGSEGV: si_errno=0, si_code=1 (SEGV_MAPERR), si_addr=0x00000000007d0038
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;表明异常时正在运行&lt;code&gt;GCTaskThread&lt;/code&gt; 垃圾回收线程，再看到后面还有一段：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;VM Arguments:
jvm_args: -XX:MaxPermSize=256m -XX:+HeapDumpOnOutOfMemoryError -Xmx1024m -Dfile.encoding=UTF-8 -Duser.country=CN -Duser.language=zh -Duser.variant 
java_command: org.gradle.launcher.daemon.bootstrap.GradleDaemon 2.10
Launcher Type: SUN_STANDARD
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;似乎是内存不足引起的。&lt;/p&gt;
&lt;h2 id=&quot;问题解决&quot;&gt;&lt;a href=&quot;#问题解决&quot; class=&quot;headerlink&quot; title=&quot;问题解决&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题解决&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;一次解决&quot;&gt;&lt;a href=&quot;#一次解决&quot; class=&quot;headerlink&quot; title=&quot;一次解决&quot;&gt;&lt;/a&gt;&lt;strong&gt;一次解决&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;尝试将 HeapSize 调大，在 app level的build.gradle中配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dexOptions {
    preDexLibraries = false
    javaMaxHeapSize &amp;quot;4g&amp;quot;   // 调大 HeapSize
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很遗憾，问题依然！ 那还原此修改，防止二次事故。&lt;/p&gt;
&lt;h3 id=&quot;二次解决&quot;&gt;&lt;a href=&quot;#二次解决&quot; class=&quot;headerlink&quot; title=&quot;二次解决&quot;&gt;&lt;/a&gt;&lt;strong&gt;二次解决&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;实在没办法，那尝试&lt;code&gt;重启大法&lt;/code&gt;吧！&lt;/p&gt;
&lt;p&gt;当然，不是简单的重启，先要清除缓存再重启Android Studio。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Android Studio -&amp;gt; File -&amp;gt; Invalidate Caches / Restart ..
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后，发现&lt;code&gt;重启大法&lt;/code&gt;果然好用，居然顺利跑起来了，目前为止没有再出现该问题。&lt;/p&gt;
&lt;h2 id=&quot;问题结果&quot;&gt;&lt;a href=&quot;#问题结果&quot; class=&quot;headerlink&quot; title=&quot;问题结果&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题结果&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;通过清除Android Studio缓存来解决该问题：&lt;/p&gt;
&lt;p&gt;在 Android Studio 的 &lt;code&gt;File&lt;/code&gt; 菜单中选择 &lt;code&gt;Invalidate Caches / Restart ..&lt;/code&gt;来清理缓存并重启Android Studio。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Android Studio -&amp;gt; File -&amp;gt; Invalidate Caches / Restart ..
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但个中缘由却并不清楚，暂且记录下来，望知情人士指教！&lt;/p&gt;
&lt;p&gt;That’s all!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;center&gt;原创文章，欢迎转载，转载请注明出处&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;center&gt;我的简书账号是ConnorLin，欢迎关注！&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;今天在码代码时遇到一个莫名其妙的问题，问题是这样的：&lt;/p&gt;
&lt;p&gt;不论 clean project、rebuild project 还是 make module 都能顺利执行，但是只要 Run app 就会报如下错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error:Execution failed for task &amp;apos;:app:transformClassesWithDexForDebug&amp;apos;.
&amp;gt; com.android.build.api.transform.TransformException: com.android.ide.common.process.ProcessException: org.gradle.process.internal.ExecException: Process &amp;apos;command &amp;apos;/home/connorlin/Program/jdk1.7.0_71/bin/java&amp;apos;&amp;apos; finished with non-zero exit value 134
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题分析&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;通常，看到 &lt;code&gt;with non-zero exit value 134&lt;/code&gt; 首先想到的是依赖冲突了，但细心点能发现，依赖冲突一般是&lt;code&gt;with non-zero exit value 1&lt;/code&gt; 或 &lt;code&gt;with non-zero exit value 2&lt;/code&gt;，此处却是&lt;code&gt;134&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;再看&lt;code&gt;Process &amp;#39;command &amp;#39;/home/connorlin/Program/jdk1.7.0_71/bin/java&amp;#39;&amp;#39; finished with non-zero exit value 134&lt;/code&gt; 似乎是JDK相关。&lt;/p&gt;
    
    </summary>
    
      <category term="Android Studio" scheme="https://github.com/ConnorLin/categories/Android-Studio/"/>
    
    
      <category term="Android Studio" scheme="https://github.com/ConnorLin/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Markdown的常用语法(个人总结)</title>
    <link href="https://github.com/ConnorLin/2016/05/06/Markdown%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95(%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93)/"/>
    <id>https://github.com/ConnorLin/2016/05/06/Markdown的常用语法(个人总结)/</id>
    <published>2016-05-06T14:27:41.000Z</published>
    <updated>2016-05-07T06:01:43.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;Markdown 是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。同时，Markdown支持嵌入&lt;code&gt;html&lt;/code&gt;标签。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;注意：Markdown使用&lt;code&gt;#&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;*&lt;/code&gt;等符号来标记， 符号后面必须跟上 &lt;strong&gt;至少1个&lt;/strong&gt; 空格才有效！&lt;/u&gt;&lt;/p&gt;
&lt;h1 id=&quot;Markdown的常用语法&quot;&gt;&lt;a href=&quot;#Markdown的常用语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown的常用语法&quot;&gt;&lt;/a&gt;&lt;strong&gt;Markdown的常用语法&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;&lt;strong&gt;标题&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Markdown 标题支持两种形式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、用&lt;code&gt;#&lt;/code&gt;标记&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;标题开头&lt;/strong&gt; 加上1~6个#，依次代表一级标题、二级标题….六级标题&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 一级标题
## 二级标题
### 三级标题
##### 四级标题
###### 五级标题
###### 六级标题
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2、用&lt;code&gt;=&lt;/code&gt;和&lt;code&gt;-&lt;/code&gt;标记&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;标题底下&lt;/strong&gt; 加上任意个&lt;code&gt;=&lt;/code&gt;代表一级标题，&lt;code&gt;-&lt;/code&gt;代表二级标题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一级标题
======

二级标题
----------
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下：&lt;/p&gt;
&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a&gt;二级标题&lt;/h2&gt;&lt;h3 id=&quot;三级标题&quot;&gt;&lt;a href=&quot;#三级标题&quot; class=&quot;headerlink&quot; title=&quot;三级标题&quot;&gt;&lt;/a&gt;三级标题&lt;/h3&gt;&lt;h5 id=&quot;四级标题&quot;&gt;&lt;a href=&quot;#四级标题&quot; class=&quot;headerlink&quot; title=&quot;四级标题&quot;&gt;&lt;/a&gt;四级标题&lt;/h5&gt;&lt;h6 id=&quot;五级标题&quot;&gt;&lt;a href=&quot;#五级标题&quot; class=&quot;headerlink&quot; title=&quot;五级标题&quot;&gt;&lt;/a&gt;五级标题&lt;/h6&gt;&lt;h6 id=&quot;六级标题&quot;&gt;&lt;a href=&quot;#六级标题&quot; class=&quot;headerlink&quot; title=&quot;六级标题&quot;&gt;&lt;/a&gt;六级标题&lt;/h6&gt;&lt;hr&gt;
&lt;h2 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;&lt;strong&gt;列表&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Markdown 支持有序列表和无序列表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无序列表使用&lt;code&gt;-&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt;和&lt;code&gt;*&lt;/code&gt;作为列表标记：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- Red
- Green
- Blue

* Red
* Green
* Blue

+ Red
+ Green
+ Blue
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Red&lt;/li&gt;
&lt;li&gt;Green&lt;/li&gt;
&lt;li&gt;Blue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;有序列表则使用数字加英文句点&lt;code&gt;.&lt;/code&gt;来表示：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. Red
2. Green
3. Blue
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Red&lt;/li&gt;
&lt;li&gt;Green&lt;/li&gt;
&lt;li&gt;Blue&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;&lt;strong&gt;引用&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;引用以&lt;code&gt;&amp;gt;&lt;/code&gt;来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。&lt;/p&gt;
&lt;p&gt;常见的引用写法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; 这是一段引用    //在`&amp;gt;`后面有 1 个空格
&amp;gt; 
&amp;gt;     这是引用的代码块形式    //在`&amp;gt;`后面有 5 个空格
&amp;gt;     
&amp;gt; 代码例子：
&amp;gt;   
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

&amp;gt; 一级引用
&amp;gt; &amp;gt; 二级引用
&amp;gt; &amp;gt; &amp;gt; 三级引用

&amp;gt; #### 这是一个四级标题
&amp;gt; 
&amp;gt; 1. 这是第一行列表项
&amp;gt; 2. 这是第二行列表项
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一段引用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这是引用的代码块形式    //在`&amp;gt;`后面有 5 个空格
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一级引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二级引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三级引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;这是一个四级标题&quot;&gt;&lt;a href=&quot;#这是一个四级标题&quot; class=&quot;headerlink&quot; title=&quot;这是一个四级标题&quot;&gt;&lt;/a&gt;这是一个四级标题&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;这是第一行列表项&lt;/li&gt;
&lt;li&gt;这是第二行列表项&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是分割线&lt;/p&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;强调&quot;&gt;&lt;a href=&quot;#强调&quot; class=&quot;headerlink&quot; title=&quot;强调&quot;&gt;&lt;/a&gt;&lt;strong&gt;强调&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;两个&lt;code&gt;*&lt;/code&gt;或&lt;code&gt;-&lt;/code&gt;代表加粗，一个&lt;code&gt;*&lt;/code&gt;或&lt;code&gt;-&lt;/code&gt;代表斜体，&lt;code&gt;~~&lt;/code&gt;代表删除。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**加粗文本** 或者 __加粗文本__

*斜体文本*  或者_斜体文本_

~~删除文本~~
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加粗文本&lt;/strong&gt; 或者 &lt;strong&gt;加粗文本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;斜体文本&lt;/em&gt; 或者 &lt;em&gt;斜体文本&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;删除文本&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;图片与链接&quot;&gt;&lt;a href=&quot;#图片与链接&quot; class=&quot;headerlink&quot; title=&quot;图片与链接&quot;&gt;&lt;/a&gt;&lt;strong&gt;图片与链接&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;图片与链接的语法很像，区别在一个 ! 号。二者格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;图片：![]()    ![图片文本(可忽略)](图片地址)

链接：[]()     [链接文本](链接地址)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;链接又分为&lt;code&gt;行内式&lt;/code&gt;、&lt;code&gt;参考式&lt;/code&gt;和 &lt;code&gt;自动链接&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这是行内式链接：[ConnorLin&amp;apos;s Blog](http://connorlin.github.io)。

这是参考式链接：[ConnorLin&amp;apos;s Blog][url]，其中url为链接标记，可置于文中任意位置。

[url]: http://connorlin.github.io/ &amp;quot;ConnorLin&amp;apos;s Blog&amp;quot;

链接标记格式为：[链接标记文本]:  链接地址  链接title(可忽略)

这是自动链接：直接使用`&amp;lt;&amp;gt;`括起来&amp;lt;http://connorlin.github.io&amp;gt;

这是图片：![][avatar]

[avatar]: https://connorlin.github.io/images/avatar.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;这是行内式链接：&lt;a href=&quot;http://connorlin.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConnorLin’s Blog&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这是参考式链接：&lt;a href=&quot;http://connorlin.github.io/&quot; title=&quot;ConnorLin&amp;#39;s Blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConnorLin’s Blog&lt;/a&gt;，其中url为链接标记，可置于文中任意位置。&lt;/p&gt;
&lt;p&gt;这是自动链接：直接使用&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;括起来&lt;a href=&quot;http://connorlin.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://connorlin.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是图片：&lt;img src=&quot;https://connorlin.github.io/images/avatar.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;代码分为&lt;code&gt;行内代码&lt;/code&gt;和&lt;code&gt;代码块&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行内代码使用 `代码` 标识，可嵌入文字中&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码块使用4个空格或```标识&lt;/p&gt;
&lt;p&gt;  ```&lt;br&gt;  这里是代码&lt;br&gt;  ```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码语法高亮在 ```后面加上&lt;code&gt;空格&lt;/code&gt;和语言名称即可&lt;/p&gt;
&lt;p&gt;  ``` 语言&lt;br&gt;  //注意语言前面有空格&lt;br&gt;  这里是代码&lt;br&gt;  ```&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这是行内代码`onCreate(Bundle savedInstanceState)`的例子。

这是代码块和语法高亮：

&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 注意java前面有空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setContentView(R.layout.activity_main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;这是行内代码&lt;code&gt;onCreate(Bundle savedInstanceState)&lt;/code&gt;的例子。&lt;/p&gt;
&lt;p&gt;这是代码块和语法高亮：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 注意java前面有空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setContentView(R.layout.activity_main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;表格&quot;&gt;&lt;a href=&quot;#表格&quot; class=&quot;headerlink&quot; title=&quot;表格&quot;&gt;&lt;/a&gt;&lt;strong&gt;表格&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;表格对齐格式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;居左：&lt;code&gt;:----&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;居中：&lt;code&gt;:----:&lt;/code&gt;或&lt;code&gt;-----&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;居右：&lt;code&gt;----:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|标题|标题|标题|
|:---|:---:|---:|
|居左测试文本|居中测试文本|居右测试文本|
|居左测试文本1|居中测试文本2|居右测试文本3|
|居左测试文本11|居中测试文本22|居右测试文本33|
|居左测试文本111|居中测试文本222|居右测试文本333|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;标题&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;标题&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;标题&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;居左测试文本&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;居中测试文本&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;居右测试文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;居左测试文本1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;居中测试文本2&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;居右测试文本3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;居左测试文本11&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;居中测试文本22&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;居右测试文本33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;居左测试文本111&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;居中测试文本222&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;居右测试文本333&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&quot;分隔线&quot;&gt;&lt;a href=&quot;#分隔线&quot; class=&quot;headerlink&quot; title=&quot;分隔线&quot;&gt;&lt;/a&gt;&lt;strong&gt;分隔线&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在一行中用三个以上的&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt;、&lt;code&gt;_&lt;/code&gt;来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;***
---
___

* * *
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果均为一条分割线：&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&quot;换行&quot;&gt;&lt;a href=&quot;#换行&quot; class=&quot;headerlink&quot; title=&quot;换行&quot;&gt;&lt;/a&gt;&lt;strong&gt;换行&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在行尾添加两个空格加回车表示换行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这是一行后面加两个空格  换行
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;这是一行后面加两个空格&lt;br&gt;换行&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;脚注-注解&quot;&gt;&lt;a href=&quot;#脚注-注解&quot; class=&quot;headerlink&quot; title=&quot;脚注(注解)&quot;&gt;&lt;/a&gt;&lt;strong&gt;脚注(注解)&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;[^]&lt;/code&gt;来定义脚注：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这是一个脚注的例子[^1]

[^1]: 这里是脚注
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;这是一个脚注的例子&lt;a href=&quot;这里是脚注&quot;&gt;^1&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;常用弥补Markdown的Html标签&quot;&gt;&lt;a href=&quot;#常用弥补Markdown的Html标签&quot; class=&quot;headerlink&quot; title=&quot;常用弥补Markdown的Html标签&quot;&gt;&lt;/a&gt;&lt;strong&gt;常用弥补Markdown的Html标签&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;字体&quot;&gt;&lt;a href=&quot;#字体&quot; class=&quot;headerlink&quot; title=&quot;字体&quot;&gt;&lt;/a&gt;&lt;strong&gt;字体&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;face&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;微软雅黑&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;size&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;6&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;字体及字体颜色和大小&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#0000ff&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;字体颜色&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;font face=&quot;微软雅黑&quot; color=&quot;red&quot; size=&quot;6&quot;&gt;字体及字体颜色和大小&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;#0000ff&quot;&gt;字体颜色&lt;/font&gt;

&lt;hr&gt;
&lt;h2 id=&quot;换行-1&quot;&gt;&lt;a href=&quot;#换行-1&quot; class=&quot;headerlink&quot; title=&quot;换行&quot;&gt;&lt;/a&gt;&lt;strong&gt;换行&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;使用html标签`&amp;lt;br/&amp;gt;`&amp;lt;br/&amp;gt;换行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;使用html标签&lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;&lt;br&gt;换行&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;文本对齐方式&quot;&gt;&lt;a href=&quot;#文本对齐方式&quot; class=&quot;headerlink&quot; title=&quot;文本对齐方式&quot;&gt;&lt;/a&gt;&lt;strong&gt;文本对齐方式&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p align=&amp;quot;left&amp;quot;&amp;gt;居左文本&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p align=&amp;quot;center&amp;quot;&amp;gt;居中文本&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p align=&amp;quot;right&amp;quot;&amp;gt;居右文本&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;居左文本&lt;/p&gt;&lt;br&gt;&lt;p align=&quot;center&quot;&gt;居中文本&lt;/p&gt;&lt;br&gt;&lt;p align=&quot;right&quot;&gt;居右文本&lt;/p&gt;

&lt;hr&gt;
&lt;h2 id=&quot;下划线&quot;&gt;&lt;a href=&quot;#下划线&quot; class=&quot;headerlink&quot; title=&quot;下划线&quot;&gt;&lt;/a&gt;&lt;strong&gt;下划线&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;u&lt;/span&gt;&amp;gt;&lt;/span&gt;下划线文本&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;u&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;u&gt;下划线文本&lt;/u&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文提供Markdown源文件，需要的请移步&lt;a href=&quot;https://github.com/ConnorLin/Blog_source_files&quot;&gt;我的个人博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That’s all, Enjoy it!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;p align=&quot;center&quot;&gt;我的简书账号是ConnorLin，欢迎关注！&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;p align=&quot;center&quot;&gt;原创文章，欢迎转载，转载请注明出处!&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;Markdown 是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。同时，Markdown支持嵌入&lt;code&gt;html&lt;/code&gt;标签。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;注意：Markdown使用&lt;code&gt;#&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;*&lt;/code&gt;等符号来标记， 符号后面必须跟上 &lt;strong&gt;至少1个&lt;/strong&gt; 空格才有效！&lt;/u&gt;&lt;/p&gt;
&lt;h1 id=&quot;Markdown的常用语法&quot;&gt;&lt;a href=&quot;#Markdown的常用语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown的常用语法&quot;&gt;&lt;/a&gt;&lt;strong&gt;Markdown的常用语法&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;&lt;strong&gt;标题&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Markdown 标题支持两种形式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、用&lt;code&gt;#&lt;/code&gt;标记&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;标题开头&lt;/strong&gt; 加上1~6个#，依次代表一级标题、二级标题….六级标题&lt;br&gt;
    
    </summary>
    
      <category term="markdown" scheme="https://github.com/ConnorLin/categories/markdown/"/>
    
    
      <category term="markdown" scheme="https://github.com/ConnorLin/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>使用Android Studio 进行NDK开发和调试</title>
    <link href="https://github.com/ConnorLin/2016/04/28/%E4%BD%BF%E7%94%A8Android-Studio-%E8%BF%9B%E8%A1%8CNDK%E5%BC%80%E5%8F%91%E5%92%8C%E8%B0%83%E8%AF%95/"/>
    <id>https://github.com/ConnorLin/2016/04/28/使用Android-Studio-进行NDK开发和调试/</id>
    <published>2016-04-28T05:04:34.000Z</published>
    <updated>2016-04-28T13:17:13.000Z</updated>
    
    <content type="html">&lt;p&gt;尽管Android Studio已经越来越流行了，但很多人还是习惯于Eclipse或源码环境下开发JNI应用。个人认为使用Android Studio作NDK开发是必然趋势，所以本文将简单介绍如何在Android Studio上实现NDK开发。&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;JNI&quot;&gt;&lt;a href=&quot;#JNI&quot; class=&quot;headerlink&quot; title=&quot;JNI&quot;&gt;&lt;/a&gt;&lt;strong&gt;JNI&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;JNI 是Java Native Inteface的缩写，是Java中定义的一种用于连接Java和C/C++接口的一种实现方式。&lt;/p&gt;
&lt;h4 id=&quot;NDK&quot;&gt;&lt;a href=&quot;#NDK&quot; class=&quot;headerlink&quot; title=&quot;NDK&quot;&gt;&lt;/a&gt;&lt;strong&gt;NDK&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;NDK 是 Native Developmentit的缩写，是Google在Android开发中提供的一套用于快速创建native工程的一个工具。&lt;br&gt;使用这个工具可以很方便的编写和调试JNI的代码。&lt;/p&gt;
&lt;p&gt;NDK可从&lt;a href=&quot;http://developer.android.com/ndk/downloads/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;或&lt;a href=&quot;http://www.androiddevtools.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidDevTools&lt;/a&gt;(个人网站)下载。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Gradle&quot;&gt;&lt;a href=&quot;#Gradle&quot; class=&quot;headerlink&quot; title=&quot;Gradle&quot;&gt;&lt;/a&gt;&lt;strong&gt;Gradle&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Gradle 是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具。它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置。  &lt;/p&gt;
&lt;p&gt;以往Android NDK开发需要在Eclipse或源码环境下，建立并配置Android.mk和Application.mk，且还要通过java命令生成.h头文件，才能编译生成so库。但在Android Studio中这些步骤都不需要，因为Gradle足够强大，只需配置Gradle即可编译生成so库。&lt;/p&gt;
&lt;h4 id=&quot;gradle-experimental插件&quot;&gt;&lt;a href=&quot;#gradle-experimental插件&quot; class=&quot;headerlink&quot; title=&quot;gradle-experimental插件&quot;&gt;&lt;/a&gt;&lt;strong&gt;gradle-experimental插件&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;在2015年5月的Google I/O大会上, Google宣布Android Studio开始支持NDK开发，通过和JetBrains的合作，将Clion整合进了Android Studio 1.3，并免费支持NDK C++开发。&lt;/p&gt;
&lt;p&gt;同年7月，在Android Studio 1.3版本上添加了&lt;code&gt;gradle-experimental&lt;/code&gt;插件，该插件支持NDK开发和调试，且带有代码不全和重构等高级功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CAVEAT: Note that this plugin is a preview of the plugin for feedback on performance and NDK integration.  The Gradle API for the new component model is not final, which means each plugin will only work with a specific version of Gradle.&lt;br&gt;Additionally, the DSL may also change.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目前这个插件是预览插件，并不是正式的。意味着插件只能运行在特定的Gradle版本上。并且DSL(领域特定语言)也要改变。&lt;/p&gt;
&lt;h3 id=&quot;使用Experimental插件进行NDK开发&quot;&gt;&lt;a href=&quot;#使用Experimental插件进行NDK开发&quot; class=&quot;headerlink&quot; title=&quot;使用Experimental插件进行NDK开发&quot;&gt;&lt;/a&gt;&lt;strong&gt;使用Experimental插件进行NDK开发&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;使用Experimental插件的必要条件&quot;&gt;&lt;a href=&quot;#使用Experimental插件的必要条件&quot; class=&quot;headerlink&quot; title=&quot;使用Experimental插件的必要条件&quot;&gt;&lt;/a&gt;&lt;strong&gt;使用Experimental插件的必要条件&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;1、Gradle-2.5或更高版本&lt;br&gt;2、Android Studio 1.3 RC1或更高版本&lt;br&gt;3、Android NDK r10e 或更高版本&lt;br&gt;4、Build Tools 19.0.0 或更高版本  &lt;/p&gt;
&lt;p&gt;每个版本的experimental插件需要特定的Gradle版本&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Plugin Version&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Gradle Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0.1.0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0.2.0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0.3.0-alpha3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0.4.0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0.6.0-alpha1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0.6.0-alpha5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2.10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0.7.0-alpha1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2.10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;NDK开发步骤&quot;&gt;&lt;a href=&quot;#NDK开发步骤&quot; class=&quot;headerlink&quot; title=&quot;NDK开发步骤&quot;&gt;&lt;/a&gt;&lt;strong&gt;NDK开发步骤&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;1、新建一个Android标准工程&lt;/p&gt;
&lt;p&gt;2、按F4打开工程配置&lt;br&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:28/settup_ndk.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3、使用experimental插件需要对以下三个文件(&lt;font color=&quot;red&quot;&gt;红色&lt;/font&gt;)做修改：&lt;/p&gt;
&lt;p dir=&quot;ltr&quot; style=&quot;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;span style=&quot;line-height:1.38;color:rgb(0,0,0);font-family:Courier New;white-space:pre-wrap;background-color:transparent&quot;&gt;&lt;font size=&quot;2&quot;&gt;.&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;&lt;font size=&quot;2&quot;&gt;├── app/&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;&lt;font size=&quot;2&quot;&gt;│   ├── app.iml&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;font size=&quot;2&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;│   ├── &lt;/span&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(255,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;build.gradle&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;&lt;font size=&quot;2&quot;&gt;│   └── src/&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;font size=&quot;2&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;├── &lt;/span&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(255,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;build.gradle&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;&lt;font size=&quot;2&quot;&gt;├── gradle/&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;&lt;font size=&quot;2&quot;&gt;│   └── wrapper/&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;&lt;font size=&quot;2&quot;&gt;│       ├── gradle-wrapper.jar&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;font size=&quot;2&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;│       └── &lt;/span&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(255,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;gradle-wrapper.properties&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;&lt;font size=&quot;2&quot;&gt;├── gradle.properties&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;&lt;font size=&quot;2&quot;&gt;├── gradlew*&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;&lt;font size=&quot;2&quot;&gt;├── gradlew.bat&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;&lt;font size=&quot;2&quot;&gt;├── local.properties&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;&lt;font size=&quot;2&quot;&gt;├── MyApplication.iml&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height:1.38;margin-top:0pt;margin-bottom:0pt&quot;&gt;&lt;span style=&quot;font-family:Courier New;color:rgb(0,0,0);vertical-align:baseline;white-space:pre-wrap;background-color:transparent&quot;&gt;&lt;font size=&quot;2&quot;&gt;└── settings.gradle&lt;/font&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h5 id=&quot;gradle-wrapper-gradle-wrapper-properties&quot;&gt;&lt;a href=&quot;#gradle-wrapper-gradle-wrapper-properties&quot; class=&quot;headerlink&quot; title=&quot;./gradle/wrapper/gradle-wrapper.properties&quot;&gt;&lt;/a&gt;&lt;strong&gt;./gradle/wrapper/gradle-wrapper.properties&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;将distributionUrl改用gradle-2.10版本&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;distributionUrl=https\:&lt;span class=&quot;comment&quot;&gt;//services.gradle.org/distributions/gradle-2.10-all.zip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;build-gradle&quot;&gt;&lt;a href=&quot;#build-gradle&quot; class=&quot;headerlink&quot; title=&quot;./build.gradle&quot;&gt;&lt;/a&gt;&lt;strong&gt;./build.gradle&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;使用com.android.tools.build:gradle-experimental 代替 com.android.tools.build:gradle.&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//classpath &#39;com.android.tools.build:gradle:2.0.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &lt;span class=&quot;string&quot;&gt;&quot;com.android.tools.build:gradle-experimental:0.7.0-alpha4&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;NOTE:&lt;/span&gt; Do not place your application dependencies here; they belong&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// in the individual module build.gradle files&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;app-build-gradle&quot;&gt;&lt;a href=&quot;#app-build-gradle&quot; class=&quot;headerlink&quot; title=&quot;./app/build.gradle&quot;&gt;&lt;/a&gt;&lt;strong&gt;./app/build.gradle&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;这部分改动比较大，修改及注释如下：&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 用com.android.model.application 代替 com.android.application&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply &lt;span class=&quot;string&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.android.model.application&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将原来的配置用 model&amp;#123;&amp;#125;包起来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;model &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 取值必须使用 “=” 形式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 否则会报 “Error:Cause: org.gradle.api.internal.ExtensibleDynamicObject” 错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        compileSdkVersion = &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buildToolsVersion = &lt;span class=&quot;string&quot;&gt;&#39;23.0.2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        defaultConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 取值必须使用 “=” 形式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            applicationId = &lt;span class=&quot;string&quot;&gt;&quot;com.connorlin.jnitest&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//这里要注意是 xxSdkVersion.apiLevel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 否则会报 “Unable to load class com.android.build.gradle.managed.ProductFlavor_Impl”错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minSdkVersion.apiLevel = &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            targetSdkVersion.apiLevel = &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            versionCode =  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            versionName = &lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 配置NDK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ndk &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 生成so的名字，是必须的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            moduleName =&lt;span class=&quot;string&quot;&gt;&quot;JNITest&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            toolchain = &lt;span class=&quot;string&quot;&gt;&#39;clang&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CFlags.add(&lt;span class=&quot;string&quot;&gt;&#39;-std=c99&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 添加依赖库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ldLibs.addAll([&lt;span class=&quot;string&quot;&gt;&#39;android&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;OpenSLES&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;log&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 生成不同abi体系的so库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            abiFilters.addAll([&lt;span class=&quot;string&quot;&gt;&#39;armeabi&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;armeabi-v7a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;arm64-v8a&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;string&quot;&gt;&#39;x86&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;x86_64&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;string&quot;&gt;&#39;mips&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;mips64&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buildTypes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            release &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                minifyEnabled = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 这里注意：使用proguardFiles.add()方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proguardFiles.add(file(&lt;span class=&quot;string&quot;&gt;&#39;proguard-rules.txt&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4、在Java文件(这里以JNIActivity为例)中添加代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.loadLibrary(&lt;span class=&quot;string&quot;&gt;&quot;JNITest&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;native&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;testJni&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时，native方法标红，提示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:28/jni_func_warning.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;testJni()&lt;/code&gt;方法上按快捷键&lt;code&gt;Alt +　Enter&lt;/code&gt;，出现如下提示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:28/alt_enter.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;按回车，会自动在main目录下生成jni文件夹，内含JniDemo.c: &lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;jni.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;JNIEXPORT jstring JNICALL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;Java_com_connorlin_jnitest_MainActivity_testJni&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jobject instance)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// TODO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (*env)-&amp;gt;NewStringUTF(env, &lt;span class=&quot;string&quot;&gt;&quot;returnValue&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你会发现，Android Studio已经为我们自动生成JNI方法了，你只需要再写实现就可以了。&lt;/p&gt;
&lt;p&gt;至此，最简单的NDK开发配置完毕。&lt;/p&gt;
&lt;p&gt;其他配置，请参考&lt;a href=&quot;http://tools.android.com/tech-docs/new-build-system/gradle-experimental&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;，Demo可以参考&lt;a href=&quot;https://github.com/googlesamples/android-ndk&quot;&gt;官方Demo&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;换种方式进行NDK开发&quot;&gt;&lt;a href=&quot;#换种方式进行NDK开发&quot; class=&quot;headerlink&quot; title=&quot;换种方式进行NDK开发&quot;&gt;&lt;/a&gt;&lt;strong&gt;换种方式进行NDK开发&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;既然预览版&lt;code&gt;com.android.tools.build:gradle-experimental&lt;/code&gt;支持NDK，那么正式版&lt;code&gt;com.android.tools.build:gradle&lt;/code&gt; 是否也可以实现NDK开发呢？&lt;/p&gt;
&lt;p&gt;经过实验，答案是可以的！&lt;/p&gt;
&lt;h4 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;1、新建一个Android标准工程，并在工程设置中配置NDK路径。&lt;/p&gt;
&lt;p&gt;2、打开 app level 的 build.gradle, 配置NDK&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ndk &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    moduleName &lt;span class=&quot;string&quot;&gt;&quot;NdkJniDemo&quot;&lt;/span&gt;          &lt;span class=&quot;comment&quot;&gt;//生成的so名字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    abiFilters &lt;span class=&quot;string&quot;&gt;&quot;armeabi&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;armeabi-v7a&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;x86&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//输出指定三种abi体系结构下的so库，可忽略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后点击右上角Sync Now, 会有如下错误提示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:28/ndk_error.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;按提示，在 gradl.properties 文件里加上&lt;code&gt;android.useDeprecatedNdk=true&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;3、在Java文件(这里以JNIActivity为例)中添加代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.loadLibrary(&lt;span class=&quot;string&quot;&gt;&quot;JNITest&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;native&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;testJni&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着在&lt;code&gt;testJni()&lt;/code&gt;方法上按快捷键&lt;code&gt;Alt +　Enter&lt;/code&gt;并回车，&lt;/p&gt;
&lt;p&gt;同样，会自动在main目录下生成jni文件夹，内含JniDemo.c: &lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;jni.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，你会发现并不会自动生成JNI方法，这是因为使用experimental插件才会自动生成代码。&lt;/p&gt;
&lt;p&gt;那自动生成代码该如何实现呢？&lt;/p&gt;
&lt;p&gt;方法依然是使用&lt;code&gt;gradle-experimental&lt;/code&gt;插件，但是不同的是，在app level的build.gradle中添加&lt;code&gt;com.android.tools.build:gradle-experimental&lt;/code&gt;依赖。&lt;/p&gt;
&lt;p&gt;4、在&lt;strong&gt;./app/build.gradle&lt;/strong&gt;中添加&lt;code&gt;gradle-experimental&lt;/code&gt;依赖&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &lt;span class=&quot;string&quot;&gt;&#39;com.android.tools.build:gradle-experimental:0.7.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再次在&lt;code&gt;testJni()&lt;/code&gt;方法上按快捷键&lt;code&gt;Alt +　Enter&lt;/code&gt;并回车&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;jni.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;JNIEXPORT jstring JNICALL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;Java_com_connorlin_jnitest_MainActivity_testJni&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jobject instance)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// TODO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (*env)-&amp;gt;NewStringUTF(env, &lt;span class=&quot;string&quot;&gt;&quot;returnValue&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你会发现成功自动生成JNI方法了。&lt;/p&gt;
&lt;h4 id=&quot;副作用&quot;&gt;&lt;a href=&quot;#副作用&quot; class=&quot;headerlink&quot; title=&quot;副作用&quot;&gt;&lt;/a&gt;&lt;strong&gt;副作用&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;这种方式有个副作用是 Run app 时可能会报错:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:28/build_err.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;此时，只要将&lt;code&gt;gradle-experimental&lt;/code&gt;依赖注释掉即可正常运行，同时会保持自动生成代码的功能，直到关闭工程。&lt;br&gt;这样我们在需要自动生成代码的时候，将gradle-experimental依赖再次打开即可。&lt;/p&gt;
&lt;h3 id=&quot;NDK调试&quot;&gt;&lt;a href=&quot;#NDK调试&quot; class=&quot;headerlink&quot; title=&quot;NDK调试&quot;&gt;&lt;/a&gt;&lt;strong&gt;NDK调试&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;默认情况下是不支持NDK调试的，但要支持NDK调试也很简单，只要做些简单配置即可。&lt;/p&gt;
&lt;p&gt;1、打开JNI调试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ConnorLin/BlogImages/master/2016%3A04%3A28/open_jni_debugger.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2、配置Android Native - Debugger&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ConnorLin/BlogImages/master/2016%3A04%3A28/edit_config.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ConnorLin/BlogImages/master/2016%3A04%3A28/native_debugger.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3、下载LLDB 2.0&lt;/p&gt;
&lt;p&gt;首次底部会报错&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:28/debugger_fix.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击 Fix，提示下载LLDB 2.0，照做，下载安装即可。&lt;/p&gt;
&lt;p&gt;4、完成NDK调试配置，可以正常调试了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That’s all!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;center&gt;原创文章，欢迎转载，转载请注明出处&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;center&gt;我的简书账号是ConnorLin，欢迎光临！&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;尽管Android Studio已经越来越流行了，但很多人还是习惯于Eclipse或源码环境下开发JNI应用。个人认为使用Android Studio作NDK开发是必然趋势，所以本文将简单介绍如何在Android Studio上实现NDK开发。&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;JNI&quot;&gt;&lt;a href=&quot;#JNI&quot; class=&quot;headerlink&quot; title=&quot;JNI&quot;&gt;&lt;/a&gt;&lt;strong&gt;JNI&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;JNI 是Java Native Inteface的缩写，是Java中定义的一种用于连接Java和C/C++接口的一种实现方式。&lt;/p&gt;
&lt;h4 id=&quot;NDK&quot;&gt;&lt;a href=&quot;#NDK&quot; class=&quot;headerlink&quot; title=&quot;NDK&quot;&gt;&lt;/a&gt;&lt;strong&gt;NDK&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;NDK 是 Native Developmentit的缩写，是Google在Android开发中提供的一套用于快速创建native工程的一个工具。&lt;br&gt;使用这个工具可以很方便的编写和调试JNI的代码。&lt;/p&gt;
&lt;p&gt;NDK可从&lt;a href=&quot;http://developer.android.com/ndk/downloads/index.html&quot;&gt;官网&lt;/a&gt;或&lt;a href=&quot;http://www.androiddevtools.cn/&quot;&gt;AndroidDevTools&lt;/a&gt;(个人网站)下载。&lt;br&gt;
    
    </summary>
    
      <category term="Android Studio, NDK, JNI" scheme="https://github.com/ConnorLin/categories/Android-Studio-NDK-JNI/"/>
    
    
      <category term="Android, Android Studio, NDK, JNI" scheme="https://github.com/ConnorLin/tags/Android-Android-Studio-NDK-JNI/"/>
    
  </entry>
  
  <entry>
    <title>让Android Studio支持系统签名</title>
    <link href="https://github.com/ConnorLin/2016/04/27/%E8%AE%A9Android-Studio%E6%94%AF%E6%8C%81%E7%B3%BB%E7%BB%9F%E7%AD%BE%E5%90%8D(%E8%AF%81%E4%B9%A6)/"/>
    <id>https://github.com/ConnorLin/2016/04/27/让Android-Studio支持系统签名(证书)/</id>
    <published>2016-04-27T05:54:02.000Z</published>
    <updated>2016-04-28T13:17:20.000Z</updated>
    
    <content type="html">&lt;p&gt;有时候，我们开发的apk需要用到系统权限，需要在AndroidManifest.xml中添加共享系统进程属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android:sharedUserId=&amp;quot;android.uid.system&amp;quot;
android:sharedUserId=&amp;quot;android.uid.shared&amp;quot;
android:sharedUserId=&amp;quot;android.media&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时候apk的签名就需要是系统签名(platform、shared或media)才能正常使用。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;常用系统签名方式&quot;&gt;&lt;a href=&quot;#常用系统签名方式&quot; class=&quot;headerlink&quot; title=&quot;常用系统签名方式&quot;&gt;&lt;/a&gt;&lt;strong&gt;常用系统签名方式&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;Android源码环境下签名&quot;&gt;&lt;a href=&quot;#Android源码环境下签名&quot; class=&quot;headerlink&quot; title=&quot;Android源码环境下签名&quot;&gt;&lt;/a&gt;&lt;strong&gt;Android源码环境下签名&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;这种方式比较麻烦，你需要有编译过的源码环境，并按如下步骤：&lt;/p&gt;
&lt;p&gt;1、拷贝App源码到Android源码的&lt;code&gt;packages/apps/&lt;/code&gt;目录下，且App源码是普通(Eclipse)格式的&lt;br&gt;2、配置Android.mk，在其中添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LOCAL_CERTIFICATE := platform 或 shared 或 media
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、使用&lt;code&gt;mm&lt;/code&gt;编译App，生成的apk即系统签名&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;手动重新签名&quot;&gt;&lt;a href=&quot;#手动重新签名&quot; class=&quot;headerlink&quot; title=&quot;手动重新签名&quot;&gt;&lt;/a&gt;&lt;strong&gt;手动重新签名&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;这种方式比在源码环境下签名简单，App可以在Eclipse或Android Studio下编译，然后给apk重新签名即可。&lt;br&gt;但这种方式在频繁调试的时候比较痛苦，即使写成脚本，也需要重复一样的操作。&lt;/p&gt;
&lt;h5 id=&quot;相关文件&quot;&gt;&lt;a href=&quot;#相关文件&quot; class=&quot;headerlink&quot; title=&quot;相关文件&quot;&gt;&lt;/a&gt;&lt;strong&gt;相关文件&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;platform.x509.pem、platform.pk8、signapk.jar&lt;/p&gt;
&lt;h5 id=&quot;文件位置&quot;&gt;&lt;a href=&quot;#文件位置&quot; class=&quot;headerlink&quot; title=&quot;文件位置&quot;&gt;&lt;/a&gt;&lt;strong&gt;文件位置&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;platform.x509.pem、platform.pk8:  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;../build/target/product/security
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;signapk.jar:  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;../out/host/linux-x86/framework
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;signapk源码路径:  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;../build/tools/signapk
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;签名命令&quot;&gt;&lt;a href=&quot;#签名命令&quot; class=&quot;headerlink&quot; title=&quot;签名命令&quot;&gt;&lt;/a&gt;&lt;strong&gt;签名命令&lt;/strong&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;java -jar signapk.jar platform.x509.pem platform.pk8 old.apk new.apk
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;1、将相关文件及源apk文件置于同一路径下&lt;br&gt;2、检查源apk包，去掉&lt;code&gt;META-INF/CERT.SF&lt;/code&gt; 和 &lt;code&gt;META-INF/CERT.RSA&lt;/code&gt; 文件&lt;br&gt;3、执行签名命令即可&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Android-Studio系统签名&quot;&gt;&lt;a href=&quot;#Android-Studio系统签名&quot; class=&quot;headerlink&quot; title=&quot;Android Studio系统签名&quot;&gt;&lt;/a&gt;&lt;strong&gt;Android Studio系统签名&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;让Android Studio集成系统签名，需要用到一个工具&lt;code&gt;keytool-importkeypair&lt;/code&gt;，详见下文。&lt;/p&gt;
&lt;h4 id=&quot;keytool-importkeypair&quot;&gt;&lt;a href=&quot;#keytool-importkeypair&quot; class=&quot;headerlink&quot; title=&quot;keytool-importkeypair&quot;&gt;&lt;/a&gt;&lt;strong&gt;keytool-importkeypair&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;keytool-importkeypair – A shell script to import key/certificate pairs into an existing Java keystore&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个工具的作用是将系统签名的相关信息导入到已有的签名文件里。可从&lt;a href=&quot;https://github.com/getfatday/keytool-importkeypair&quot;&gt;这里&lt;/a&gt;下载。&lt;/p&gt;
&lt;p&gt;工具的使用方法可以通过–help或README.textile来寻求帮助，或参考&lt;a href=&quot;http://czj4451.iteye.com/blog/1487684&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用keytool工具&lt;/a&gt; 这篇文章。&lt;/p&gt;
&lt;h4 id=&quot;相关文件-1&quot;&gt;&lt;a href=&quot;#相关文件-1&quot; class=&quot;headerlink&quot; title=&quot;相关文件&quot;&gt;&lt;/a&gt;&lt;strong&gt;相关文件&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;platform.x509.pem、platform.pk8、keytool-importkeypair、demo.jks、signature.sh&lt;/p&gt;
&lt;p&gt;我的做法是在App根目录新建Signature文件夹专门存放签名相关文件。&lt;/p&gt;
&lt;h4 id=&quot;步骤-1&quot;&gt;&lt;a href=&quot;#步骤-1&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;1、生成demo.jks签名文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:27/generate_signed_apk.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:27/genertate_signature.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2、编写签名脚本signature.sh，内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh

# 转换系统签名命令
./keytool-importkeypair -k demo.jks -p 123456 -pk8 platform.pk8 -cert platform.x509.pem -alias demo

# demo.jks : 签名文件
# 123456 : 签名文件密码
# platform.pk8、platform.x509.pem : 系统签名文件
# demo : 签名文件别名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为脚本文件添加可执行权限：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo chmod a+x signature.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行脚本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./signature.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、配置builde.gradle&lt;/p&gt;
&lt;p&gt;在android区域下(与defaultConfig同级)添加配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;signingConfigs {
    release {
        storeFile file(&amp;quot;../signature/demo.jks&amp;quot;)
        storePassword &amp;apos;123456&amp;apos;
        keyAlias &amp;apos;demo&amp;apos;
        keyPassword &amp;apos;123456&amp;apos;
    }

    debug {
        storeFile file(&amp;quot;../signature/demo.jks&amp;quot;)
        storePassword &amp;apos;123456&amp;apos;
        keyAlias &amp;apos;demo&amp;apos;
        keyPassword &amp;apos;123456&amp;apos;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样debug或release apk就带有系统签名了。&lt;/p&gt;
&lt;p&gt;如果想直接&lt;code&gt;Run app&lt;/code&gt;就是release版且带系统签名的apk，还需修改：&lt;/p&gt;
&lt;p&gt;1) 变体app&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:27/release_variant.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2) 修改&lt;code&gt;buildTypes&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;buildTypes {
    release {
        minifyEnabled false
        proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.txt&amp;apos;
        signingConfig signingConfigs.release
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样直接&lt;code&gt;Run app&lt;/code&gt;就是带系统签名的release版apk了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That’s all, Enjoy it!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;center&gt;原创文章，欢迎转载，转载请注明出处&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;center&gt;我的简书账号是ConnorLin，欢迎光临！&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;有时候，我们开发的apk需要用到系统权限，需要在AndroidManifest.xml中添加共享系统进程属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android:sharedUserId=&amp;quot;android.uid.system&amp;quot;
android:sharedUserId=&amp;quot;android.uid.shared&amp;quot;
android:sharedUserId=&amp;quot;android.media&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时候apk的签名就需要是系统签名(platform、shared或media)才能正常使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Android Studio" scheme="https://github.com/ConnorLin/categories/Android-Studio/"/>
    
    
      <category term="Android Studio, Signature" scheme="https://github.com/ConnorLin/tags/Android-Studio-Signature/"/>
    
  </entry>
  
  <entry>
    <title>你真的了解Android Notification吗?</title>
    <link href="https://github.com/ConnorLin/2016/04/21/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3Android-Notification%E5%90%97/"/>
    <id>https://github.com/ConnorLin/2016/04/21/你真的了解Android-Notification吗/</id>
    <published>2016-04-21T13:51:01.000Z</published>
    <updated>2016-04-28T13:17:24.000Z</updated>
    
    <content type="html">&lt;p&gt;最近时不时地有人问我这样或那样的通知如何实现，所以本文将根据个人经验对Notification做个总结，以供参考！&lt;/p&gt;
&lt;h3 id=&quot;什么是通知-Notification&quot;&gt;&lt;a href=&quot;#什么是通知-Notification&quot; class=&quot;headerlink&quot; title=&quot;什么是通知(Notification)&quot;&gt;&lt;/a&gt;&lt;strong&gt;什么是通知(Notification)&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;通知是一个可以在应用程序正常的用户界面之外显示给用户的消息。&lt;br&gt;通知发出时，它首先出现在状态栏的通知区域中，用户打开通知抽屉可查看通知详情。通知区域和通知抽屉都是用户可以随时查看的系统控制区域。&lt;/p&gt;
&lt;p&gt;作为安卓用户界面的重要组成部分，通知有自己的设计指南。在Android 5.0(API level 21)中引入的 &lt;a href=&quot;http://developer.android.com/training/material/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material Design&lt;/a&gt; 的变化是特别重要的，更多信息请阅读 &lt;a href=&quot;http://developer.android.com/design/patterns/notifications.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;通知设计指南&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;如何创建通知&quot;&gt;&lt;a href=&quot;#如何创建通知&quot; class=&quot;headerlink&quot; title=&quot;如何创建通知&quot;&gt;&lt;/a&gt;&lt;strong&gt;如何创建通知&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;随着Android系统不断升级，Notification的创建方式也随之变化，主要变化如下:&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Android-3-0之前&quot;&gt;&lt;a href=&quot;#Android-3-0之前&quot; class=&quot;headerlink&quot; title=&quot;Android 3.0之前&quot;&gt;&lt;/a&gt;&lt;strong&gt;Android 3.0之前&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Android 3.0 (API level 11)之前，使用&lt;code&gt;new Notification()&lt;/code&gt;方式创建通知: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NotificationManager mNotifyMgr = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
PendingIntent contentIntent = PendingIntent.getActivity(this, 0, new Intent(this, ResultActivity.class), 0);

Notification notification = new Notification(icon, tickerText, when);
notification.setLatestEventInfo(this, title, content, contentIntent);

mNotifyMgr.notify(NOTIFICATIONS_ID, notification);
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;Android-3-0-API-level-11-及更高版本&quot;&gt;&lt;a href=&quot;#Android-3-0-API-level-11-及更高版本&quot; class=&quot;headerlink&quot; title=&quot;Android 3.0 (API level 11)及更高版本&quot;&gt;&lt;/a&gt;&lt;strong&gt;Android 3.0 (API level 11)及更高版本&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Android 3.0开始弃用&lt;code&gt;new Notification()&lt;/code&gt;方式，改用&lt;code&gt;Notification.Builder()&lt;/code&gt;来创建通知:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NotificationManager mNotifyMgr = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
PendingIntent contentIntent = PendingIntent.getActivity(this, 0, new Intent(this, ResultActivity.class), 0);

Notification notification = new Notification.Builder(this)
            .setSmallIcon(R.drawable.notification_icon)
            .setContentTitle(&amp;quot;My notification&amp;quot;)
            .setContentText(&amp;quot;Hello World!&amp;quot;)
            .setContentIntent(contentIntent)
            .build();   // getNotification()  deprecated in API level 16

mNotifyMgr.notify(NOTIFICATIONS_ID, notification);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里需要注意: “build()” 是Androdi 4.1(API level 16)加入的，用以替代”getNotification()”。API level 16开始弃用”getNotification()”&lt;/p&gt;
&lt;h4 id=&quot;兼容Android-3-0之前的版本&quot;&gt;&lt;a href=&quot;#兼容Android-3-0之前的版本&quot; class=&quot;headerlink&quot; title=&quot;兼容Android 3.0之前的版本&quot;&gt;&lt;/a&gt;&lt;strong&gt;兼容Android 3.0之前的版本&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;为了兼容&lt;code&gt;API level 11&lt;/code&gt;之前的版本，&lt;code&gt;v4 Support Library&lt;/code&gt;中提供了&lt;code&gt;NotificationCompat.Builder()&lt;/code&gt;这个替代方法。它与&lt;code&gt;Notification.Builder()&lt;/code&gt;类似，二者没有太大区别。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NotificationManager mNotifyMgr = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
PendingIntent contentIntent = PendingIntent.getActivity(this, 0, new Intent(this, ResultActivity.class), 0);

NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this)
            .setSmallIcon(R.drawable.notification_icon)
            .setContentTitle(&amp;quot;My notification&amp;quot;)
            .setContentText(&amp;quot;Hello World!&amp;quot;)
            .setContentIntent(contentIntent)
            .build();

mNotifyMgr.notify(NOTIFICATIONS_ID, notification);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;注：除特别说明外，本文将根据 NotificationCompat.Builder() 展开解析，Notification.Builder()类似。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;通知基本用法&quot;&gt;&lt;a href=&quot;#通知基本用法&quot; class=&quot;headerlink&quot; title=&quot;通知基本用法&quot;&gt;&lt;/a&gt;&lt;strong&gt;通知基本用法&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;通知的必要属性&quot;&gt;&lt;a href=&quot;#通知的必要属性&quot; class=&quot;headerlink&quot; title=&quot;通知的必要属性&quot;&gt;&lt;/a&gt;&lt;strong&gt;通知的必要属性&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;一个通知必须包含以下三项属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小图标，对应 setSmallIcon()&lt;/li&gt;
&lt;li&gt;通知标题，对应 setContentTitle()&lt;/li&gt;
&lt;li&gt;详细信息，对应 setContentText()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他属性均为可选项，更多属性方法请参考&lt;a href=&quot;http://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NotificationCompat.Builder&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;尽管其他都是可选的，但一般都会为通知添加至少一个动作(Action)，这个动作可以是跳转到Activity、启动一个Service或发送一个Broadcas等。 通过以下方式为通知添加动作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用PendingIntent&lt;/li&gt;
&lt;li&gt;通过大视图通知的 Action Button //仅支持Android 4.1 (API level 16)及更高版本，稍后会介绍&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;创建通知&quot;&gt;&lt;a href=&quot;#创建通知&quot; class=&quot;headerlink&quot; title=&quot;创建通知&quot;&gt;&lt;/a&gt;&lt;strong&gt;创建通知&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;1、实例化一个NotificationCompat.Builder对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this)
            .setSmallIcon(R.drawable.notification_icon)
            .setContentTitle(&amp;quot;My notification&amp;quot;)
            .setContentText(&amp;quot;Hello World!&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;NotificationCompat.Builder自动设置的默认值:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;priority: PRIORITY_DEFAULT&lt;/li&gt;
&lt;li&gt;when: System.currentTimeMillis() &lt;/li&gt;
&lt;li&gt;audio stream: STREAM_DEFAULT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、定义并设置一个通知动作(Action)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Intent resultIntent = new Intent(this, ResultActivity.class);
PendingIntent resultPendingIntent = PendingIntent.getActivity(
            this, 0, resultIntent, PendingIntent.FLAG_UPDATE_CURRENT);
mBuilder.setContentIntent(resultPendingIntent);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、生成&lt;code&gt;Notification&lt;/code&gt;对象 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Notificatioin notification = mBuilder.build();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、使用&lt;code&gt;NotificationManager&lt;/code&gt;发送通知 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Sets an ID for the notification
int mNotificationId = 001;

// Gets an instance of the NotificationManager service
NotificationManager mNotifyMgr = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);

// Builds the notification and issues it.
mNotifyMgr.notify(mNotificationId, notification);
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;更新通知&quot;&gt;&lt;a href=&quot;#更新通知&quot; class=&quot;headerlink&quot; title=&quot;更新通知&quot;&gt;&lt;/a&gt;&lt;strong&gt;更新通知&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;更新通知很简单，只需再次发送相同ID的通知即可，如果之前的通知依然存在则会更新通知属性，如果之前通知不存在则重新创建。&lt;br&gt;示例代码:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NotificationManager mNotifyMgr = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
// Sets an ID for the notification, so it can be updated
int notifyID = 1;
NotificationCompat.Builder mNotifyBuilder = new NotificationCompat.Builder(this)
        .setContentTitle(&amp;quot;New Message&amp;quot;)
        .setContentText(&amp;quot;You&amp;apos;ve received new messages.&amp;quot;)
        .setSmallIcon(R.drawable.ic_notify_status);

int numMessages = 0;
// Start of a loop that processes data and then notifies the user
...
    mNotifyBuilder.setContentText(&amp;quot;new content text&amp;quot;)
            .setNumber(++numMessages);
    // Because the ID remains unchanged, the existing notification is updated.
    mNotifyMgr.notify(notifyID, mNotifyBuilder.build());
...
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;取消通知&quot;&gt;&lt;a href=&quot;#取消通知&quot; class=&quot;headerlink&quot; title=&quot;取消通知&quot;&gt;&lt;/a&gt;&lt;strong&gt;取消通知&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;取消通知有如下4种方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击通知栏的清除按钮，会清除所有可清除的通知&lt;/li&gt;
&lt;li&gt;设置了 setAutoCancel() 或 FLAG_AUTO_CANCEL的通知，点击该通知时会清除它&lt;/li&gt;
&lt;li&gt;通过 NotificationManager 调用 cancel() 方法清除指定ID的通知&lt;/li&gt;
&lt;li&gt;通过 NotificationManager 调用 cancelAll() 方法清除所有该应用之前发送的通知&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;通知类型&quot;&gt;&lt;a href=&quot;#通知类型&quot; class=&quot;headerlink&quot; title=&quot;通知类型&quot;&gt;&lt;/a&gt;&lt;strong&gt;通知类型&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;大视图通知&quot;&gt;&lt;a href=&quot;#大视图通知&quot; class=&quot;headerlink&quot; title=&quot;大视图通知&quot;&gt;&lt;/a&gt;&lt;strong&gt;大视图通知&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;通知有两种视图：普通视图和大视图。&lt;br&gt;普通视图:&lt;br&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:20/notifications-normalview.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;大视图:&lt;br&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:20/notifications-bigview.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;默认情况下为普通视图，可通过&lt;code&gt;NotificationCompat.Builder.setStyle()&lt;/code&gt;设置大视图。 &lt;/p&gt;
&lt;p&gt;注: 大视图(Big Views)由Android 4.1(API level 16)开始引入，且仅支持Android 4.1及更高版本。&lt;/p&gt;
&lt;h5 id=&quot;构建大视图通知&quot;&gt;&lt;a href=&quot;#构建大视图通知&quot; class=&quot;headerlink&quot; title=&quot;构建大视图通知&quot;&gt;&lt;/a&gt;&lt;strong&gt;构建大视图通知&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;以上图为例:&lt;br&gt;1、构建Action Button的PendingIntent &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Intent dismissIntent = new Intent(this, PingService.class);
dismissIntent.setAction(CommonConstants.ACTION_DISMISS);
PendingIntent piDismiss = PendingIntent.getService(this, 0, dismissIntent, 0);

Intent snoozeIntent = new Intent(this, PingService.class);
snoozeIntent.setAction(CommonConstants.ACTION_SNOOZE);
PendingIntent piSnooze = PendingIntent.getService(this, 0, snoozeIntent, 0);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、构建NotificatonCompat.Builder对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NotificationCompat.Builder builder = new NotificationCompat.Builder(this)
        .setSmallIcon(R.drawable.ic_stat_notification)
        .setContentTitle(getString(R.string.notification))
        .setContentText(getString(R.string.ping))
        .setDefaults(Notification.DEFAULT_ALL) // requires VIBRATE permission
        // 该方法在Android 4.1之前会被忽略
        .setStyle(new NotificationCompat.BigTextStyle()
                .bigText(msg))
        //添加Action Button
        .addAction (R.drawable.ic_stat_dismiss,
                getString(R.string.dismiss), piDismiss)
        .addAction (R.drawable.ic_stat_snooze,
                getString(R.string.snooze), piSnooze);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、其他步骤与普通视图相同&lt;/p&gt;
&lt;h4 id=&quot;进度条通知&quot;&gt;&lt;a href=&quot;#进度条通知&quot; class=&quot;headerlink&quot; title=&quot;进度条通知&quot;&gt;&lt;/a&gt;&lt;strong&gt;进度条通知&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;明确进度的进度条&lt;/strong&gt;&lt;br&gt;使用&lt;code&gt;setProgress(max, progress, false)&lt;/code&gt;来更新进度。&lt;br&gt;max: 最大进度值&lt;br&gt;progress: 当前进度&lt;br&gt;false: 是否是不明确的进度条&lt;/p&gt;
&lt;p&gt;模拟下载过程，示例如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    int id = 1;
...
mNotifyManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
mBuilder = new NotificationCompat.Builder(this);
mBuilder.setContentTitle(&amp;quot;Picture Download&amp;quot;)
    .setContentText(&amp;quot;Download in progress&amp;quot;)
    .setSmallIcon(R.drawable.ic_notification);

// Start a lengthy operation in a background thread
new Thread(
    new Runnable() {
        @Override
        public void run() {
            int incr;
            for (incr = 0; incr &amp;lt;= 100; incr+=5) {
                mBuilder.setProgress(100, incr, false);
                mNotifyManager.notify(id, mBuilder.build());
                try {
                    // Sleep for 5 seconds
                    Thread.sleep(5*1000);
                } catch (InterruptedException e) {
                    Log.d(TAG, &amp;quot;sleep failure&amp;quot;);
                }
            }
            mBuilder.setContentText(&amp;quot;Download complete&amp;quot;)//下载完成           
                    .setProgress(0,0,false);    //移除进度条
            mNotifyManager.notify(id, mBuilder.build());
        }
    }
).start();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:20/progress_bar_summary.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;上图，分别为下载过程中进度条通知 和 下载完成移除进度条后的通知。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;不确定进度的进度条&lt;/strong&gt;&lt;br&gt;使用&lt;code&gt;setProgress(0, 0, true)&lt;/code&gt;来表示进度不明确的进度条&lt;/p&gt;
&lt;p&gt;mBuilder.setProgress(0, 0, true); mNotifyManager.notify(id, mBuilder.build());&lt;br&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:20/activity_indicator.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;浮动通知-Heads-up-Notifications&quot;&gt;&lt;a href=&quot;#浮动通知-Heads-up-Notifications&quot; class=&quot;headerlink&quot; title=&quot;浮动通知(Heads-up Notifications)&quot;&gt;&lt;/a&gt;&lt;strong&gt;浮动通知(Heads-up Notifications)&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Android 5.0(API level 21)开始，当屏幕未上锁且亮屏时，通知可以以小窗口形式显示。用户可以在不离开当前应用前提下操作该通知。&lt;br&gt;如图:&lt;br&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:20/heads-up.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NotificationCompat.Builder mNotifyBuilder = new NotificationCompat.Builder(this)
        .setContentTitle(&amp;quot;New Message&amp;quot;)
        .setContentText(&amp;quot;You&amp;apos;ve received new messages.&amp;quot;)
        .setSmallIcon(R.drawable.ic_notify_status)
        .setFullScreenIntent(pendingIntent, false);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下两种情况会显示浮动通知:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setFullScreenIntent()，如上述示例。&lt;/li&gt;
&lt;li&gt;通知拥有高优先级且使用了铃声和振动&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;锁屏通知&quot;&gt;&lt;a href=&quot;#锁屏通知&quot; class=&quot;headerlink&quot; title=&quot;锁屏通知&quot;&gt;&lt;/a&gt;&lt;strong&gt;锁屏通知&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Android 5.0(API level 21)开始，通知可以显示在锁屏上。用户可以通过设置选择是否允许敏感的通知内容显示在安全的锁屏上。&lt;br&gt;你的应用可以通过&lt;code&gt;setVisibility()&lt;/code&gt;控制通知的显示等级:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VISIBILITY_PRIVATE : 显示基本信息，如通知的图标，但隐藏通知的全部内容&lt;/li&gt;
&lt;li&gt;VISIBILITY_PUBLIC : 显示通知的全部内容&lt;/li&gt;
&lt;li&gt;VISIBILITY_SECRET : 不显示任何内容，包括图标&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;自定义通知&quot;&gt;&lt;a href=&quot;#自定义通知&quot; class=&quot;headerlink&quot; title=&quot;自定义通知&quot;&gt;&lt;/a&gt;&lt;strong&gt;自定义通知&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Android系统允许使用&lt;a href=&quot;http://developer.android.com/reference/android/widget/RemoteViews.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RemoteViews&lt;/a&gt;来自定义通知。&lt;br&gt;自定义普通视图通知高度限制为64dp，大视图通知高度限制为256dp。同时，建议自定义通知尽量简单，以提高兼容性。&lt;/p&gt;
&lt;p&gt;自定义通知需要做如下操作:&lt;br&gt;1、创建自定义通知布局&lt;br&gt;2、使用RemoteViews定义通知组件，如图标、文字等&lt;br&gt;3、调用&lt;code&gt;setContent()&lt;/code&gt;将RemoteViews对象绑定到NotificationCompat.Builder&lt;br&gt;4、同正常发送通知流程  &lt;/p&gt;
&lt;p&gt;注意: 避免为通知设置背景，因为兼容性原因，有些文字可能看不清。  &lt;/p&gt;
&lt;h5 id=&quot;定义通知文本样式&quot;&gt;&lt;a href=&quot;#定义通知文本样式&quot; class=&quot;headerlink&quot; title=&quot;定义通知文本样式&quot;&gt;&lt;/a&gt;&lt;strong&gt;定义通知文本样式&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;通知的背景颜色在不同的设备和版本中有所不同，Android2.3开始，系统定义了一套标准通知文本样式，建议自定义通知使用标准样式，这样有助于通知文本可见。&lt;br&gt;通知文本样式:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Android 5.0之前可用:
android:style/TextAppearance.StatusBar.EventContent.Title    // 通知标题样式  
android:style/TextAppearance.StatusBar.EventContent             // 通知内容样式  

Android 5.0及更高版本:  
android:style/TextAppearance.Material.Notification.Title         // 通知标题样式  
android:style/TextAppearance.Material.Notification                  // 通知内容样式  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更多通知的标准样式和布局，可参考源码&lt;code&gt;frameworks/base/core/res/res/layout&lt;/code&gt;路径下的通知模版如:  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Android 5.0之前:  
notification_template_base.xml  
notification_template_big_base.xml  
notification_template_big_picture.xml  
notification_template_big_text.xml  

Android 5.0 及更高版本:  
notification_template_material_base.xml  
notification_template_material_big_base.xml  
notification_template_material_big_picture.xml  
notification_template_part_chronometer.xml  
notification_template_progressbar.xml  

等等。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;保留Activity返回栈&quot;&gt;&lt;a href=&quot;#保留Activity返回栈&quot; class=&quot;headerlink&quot; title=&quot;保留Activity返回栈&quot;&gt;&lt;/a&gt;&lt;strong&gt;保留Activity返回栈&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;常规Activity&quot;&gt;&lt;a href=&quot;#常规Activity&quot; class=&quot;headerlink&quot; title=&quot;常规Activity&quot;&gt;&lt;/a&gt;&lt;strong&gt;常规Activity&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;默认情况下，从通知启动一个Activity，按返回键会回到主屏幕。但某些时候有按返回键仍然留在当前应用的需求，这就要用到&lt;code&gt;TaskStackBuilder&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;1、在manifest中定义Activity的关系&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Android 4.0.3 及更早版本
&amp;lt;activity
    android:name=&amp;quot;.ResultActivity&amp;quot;&amp;gt;
    &amp;lt;meta-data
        android:name=&amp;quot;android.support.PARENT_ACTIVITY&amp;quot;
        android:value=&amp;quot;.MainActivity&amp;quot;/&amp;gt;
&amp;lt;/activity&amp;gt;

Android 4.1 及更高版本
&amp;lt;activity
    android:name=&amp;quot;.ResultActivity&amp;quot;
    android:parentActivityName=&amp;quot;.MainActivity&amp;quot;&amp;gt;
&amp;lt;/activity&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、创建返回栈PendingIntent&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Intent resultIntent = new Intent(this, ResultActivity.class);
TaskStackBuilder stackBuilder = TaskStackBuilder.create(this);
// 添加返回栈
stackBuilder.addParentStack(ResultActivity.class);
// 添加Intent到栈顶
stackBuilder.addNextIntent(resultIntent);
// 创建包含返回栈的pendingIntent
PendingIntent resultPendingIntent =
        stackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT);

NotificationCompat.Builder builder = new NotificationCompat.Builder(this);
builder.setContentIntent(resultPendingIntent);
NotificationManager mNotificationManager =
    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
mNotificationManager.notify(id, builder.build());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述操作后，从通知启动ResultActivity，按返回键会回到MainActivity，而不是主屏幕。&lt;/p&gt;
&lt;h4 id=&quot;特殊Activity&quot;&gt;&lt;a href=&quot;#特殊Activity&quot; class=&quot;headerlink&quot; title=&quot;特殊Activity&quot;&gt;&lt;/a&gt;&lt;strong&gt;特殊Activity&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;默认情况下，从通知启动的Activity会在近期任务列表里出现。如果不需要在近期任务里显示，则需要做以下操作:&lt;/p&gt;
&lt;p&gt;1、在manifest中定义Activity&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;activity
    android:name=&amp;quot;.ResultActivity&amp;quot;
    android:launchMode=&amp;quot;singleTask&amp;quot;
    android:taskAffinity=&amp;quot;&amp;quot;
    android:excludeFromRecents=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;/activity&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、构建PendingIntent&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NotificationCompat.Builder builder = new NotificationCompat.Builder(this);
Intent notifyIntent = new Intent(this, ResultActivity.class);

// Sets the Activity to start in a new, empty task
notifyIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);

PendingIntent notifyPendingIntent =
        PendingIntent.getActivity(this, 0, notifyIntent, PendingIntent.FLAG_UPDATE_CURRENT);

builder.setContentIntent(notifyPendingIntent);
NotificationManager mNotificationManager =
    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
mNotificationManager.notify(id, builder.build());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述操作后，从通知启动ResultActivity，此Activity不会出现在近期任务列表中。&lt;/p&gt;
&lt;h3 id=&quot;通知常见属性和常量&quot;&gt;&lt;a href=&quot;#通知常见属性和常量&quot; class=&quot;headerlink&quot; title=&quot;通知常见属性和常量&quot;&gt;&lt;/a&gt;&lt;strong&gt;通知常见属性和常量&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;通知的提醒方式&quot;&gt;&lt;a href=&quot;#通知的提醒方式&quot; class=&quot;headerlink&quot; title=&quot;通知的提醒方式&quot;&gt;&lt;/a&gt;&lt;strong&gt;通知的提醒方式&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、声音提醒&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;默认声音&lt;br&gt;notification.defaults |= Notification.DEFAULT_SOUND;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义声音&lt;br&gt;notification.sound = Uri.parse(“file:///sdcard0/notification.ogg”);&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2、震动提醒&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;默认振动&lt;br&gt;notification.defaults |= Notification.DEFAULT_VIBRATE;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义振动&lt;br&gt;long[] vibrate = {100, 200, 300, 400}; //震动效果&lt;br&gt;// 表示在100、200、300、400这些时间点交替启动和关闭震动 notification.vibrate = vibrate;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3、闪烁提醒&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;默认闪烁&lt;br&gt;notification.defaults |= Notification.DEFAULT_LIGHTS;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义闪烁&lt;br&gt;notification.ledARGB = 0xff00ff00; // LED灯的颜色，绿灯&lt;br&gt;notification.ledOnMS = 300; // LED灯显示的毫秒数，300毫秒&lt;br&gt;notification.ledOffMS = 1000; // LED灯关闭的毫秒数，1000毫秒&lt;br&gt;notification.flags |= Notification.FLAG_SHOW_LIGHTS; // 必须加上这个标志&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;常见的Flags&quot;&gt;&lt;a href=&quot;#常见的Flags&quot; class=&quot;headerlink&quot; title=&quot;常见的Flags&quot;&gt;&lt;/a&gt;&lt;strong&gt;常见的Flags&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FLAG_AUTO_CANCEL&lt;br&gt;当通知被用户点击之后会自动被清除(cancel)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FLAG_INSISTENT&lt;br&gt;在用户响应之前会一直重复提醒音&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FLAG_ONGOING_EVENT&lt;br&gt;表示正在运行的事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FLAG_NO_CLEAR&lt;br&gt;通知栏点击“清除”按钮时，该通知将不会被清除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FLAG_FOREGROUND_SERVICE&lt;br&gt;表示当前服务是前台服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多Notification属性详见&lt;a href=&quot;http://developer.android.com/reference/android/app/Notification.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Notification&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;That’s all！ 更多通知知识点等待你来发掘，欢迎补充!  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/ui/notifiers/notifications.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Notifications&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;center&gt;原创文章，欢迎转载，转载请注明出处&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;center&gt;我的简书账号是ConnorLin，欢迎光临！&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近时不时地有人问我这样或那样的通知如何实现，所以本文将根据个人经验对Notification做个总结，以供参考！&lt;/p&gt;
&lt;h3 id=&quot;什么是通知-Notification&quot;&gt;&lt;a href=&quot;#什么是通知-Notification&quot; class=&quot;headerlink&quot; title=&quot;什么是通知(Notification)&quot;&gt;&lt;/a&gt;&lt;strong&gt;什么是通知(Notification)&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;通知是一个可以在应用程序正常的用户界面之外显示给用户的消息。&lt;br&gt;通知发出时，它首先出现在状态栏的通知区域中，用户打开通知抽屉可查看通知详情。通知区域和通知抽屉都是用户可以随时查看的系统控制区域。&lt;/p&gt;
&lt;p&gt;作为安卓用户界面的重要组成部分，通知有自己的设计指南。在Android 5.0(API level 21)中引入的 &lt;a href=&quot;http://developer.android.com/training/material/index.html&quot;&gt;Material Design&lt;/a&gt; 的变化是特别重要的，更多信息请阅读 &lt;a href=&quot;http://developer.android.com/design/patterns/notifications.html&quot;&gt;通知设计指南&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;如何创建通知&quot;&gt;&lt;a href=&quot;#如何创建通知&quot; class=&quot;headerlink&quot; title=&quot;如何创建通知&quot;&gt;&lt;/a&gt;&lt;strong&gt;如何创建通知&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;随着Android系统不断升级，Notification的创建方式也随之变化，主要变化如下:&lt;br&gt;
    
    </summary>
    
      <category term="Android Notification" scheme="https://github.com/ConnorLin/categories/Android-Notification/"/>
    
    
      <category term="Android Notification RemoteViews" scheme="https://github.com/ConnorLin/tags/Android-Notification-RemoteViews/"/>
    
  </entry>
  
  <entry>
    <title>Android应用使用Multidex突破64K方法数限制</title>
    <link href="https://github.com/ConnorLin/2016/04/15/Android%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8Multidex%E7%AA%81%E7%A0%B464K%E6%96%B9%E6%B3%95%E6%95%B0%E9%99%90%E5%88%B6/"/>
    <id>https://github.com/ConnorLin/2016/04/15/Android应用使用Multidex突破64K方法数限制/</id>
    <published>2016-04-15T05:30:59.000Z</published>
    <updated>2016-04-28T13:17:03.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;前几天，开发中遇到一个问题，Log信息如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;E/AndroidRuntime(10943): FATAL EXCEPTION: main
E/AndroidRuntime(10943): Process: com.freeme.gallery, PID: 10943
E/AndroidRuntime(10943): java.lang.NoClassDefFoundError: com.freeme.gallery.data.DataManager$DateTakenComparator
E/AndroidRuntime(10943):     at com.freeme.gallery.data.DataManager.&amp;lt;clinit&amp;gt;(DataManager.java:65)
E/AndroidRuntime(10943):     at com.freeme.gallery.app.GalleryAppImpl.getDataManager(GalleryAppImpl.java:77)
E/AndroidRuntime(10943):     at com.freeme.gallery.provider.GalleryProvider.onCreate(GalleryProvider.java:101)
E/AndroidRuntime(10943):     at android.content.ContentProvider.attachInfo(ContentProvider.java:1656)
E/AndroidRuntime(10943):     at android.content.ContentProvider.attachInfo(ContentProvider.java:1627)
E/AndroidRuntime(10943):     at android.app.ActivityThread.installProvider(ActivityThread.java:5060)
E/AndroidRuntime(10943):     at android.app.ActivityThread.installContentProviders(ActivityThread.java:4634)
E/AndroidRuntime(10943):     at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4567)
E/AndroidRuntime(10943):     at android.app.ActivityThread.access$1500(ActivityThread.java:153)
E/AndroidRuntime(10943):     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1404)
E/AndroidRuntime(10943):     at android.os.Handler.dispatchMessage(Handler.java:110)
E/AndroidRuntime(10943):     at android.os.Looper.loop(Looper.java:193)
E/AndroidRuntime(10943):     at android.app.ActivityThread.main(ActivityThread.java:5351)
E/AndroidRuntime(10943):     at java.lang.reflect.Method.invokeNative(Native Method)
E/AndroidRuntime(10943):     at java.lang.reflect.Method.invoke(Method.java:515)
E/AndroidRuntime(10943):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:835)
E/AndroidRuntime(10943):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:651)
E/AndroidRuntime(10943):     at dalvik.system.NativeStart.main(Native Method)
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;从报错信息来看，是没有找到&lt;code&gt;DateTakenComparator&lt;/code&gt;这个内部类且又是运行时异常，那是不是和ClassLoader有关系呢?&lt;br&gt;那么首先排除代码原因，开始从Gradle和Gradle插件版本入手，通过改变版本来验证。然而验证下来发现与Gradle并没关系。  &lt;/p&gt;
&lt;p&gt;那么问题到底出在哪呢？&lt;br&gt;没辙！于是开始按节点排查，排查过几个关键节点后，终于得出一个结论：&lt;strong&gt;引入某个特定library后就会报这个错&lt;/strong&gt;。  &lt;/p&gt;
&lt;p&gt;然而这个library是直接从Maven导入的，library本身肯定没有问题。似乎到这里线索又断了…恰逢此时，同事建议看下apk包大小。不看不知道，看过才恍然大悟，apk内大有乾坤啊。  &lt;/p&gt;
&lt;p&gt;apk包中含有两个&lt;code&gt;.dex&lt;/code&gt;文件：&lt;code&gt;classes.dex&lt;/code&gt;和&lt;code&gt;classes2.dex&lt;/code&gt;，再看&lt;code&gt;java.lang.NoClassDefFoundError&lt;/code&gt;，结果显而易见，方法数超限了！但是已经在build.gradle中配置了&lt;code&gt;multiDexEnabled true&lt;/code&gt;和添加了&lt;code&gt;android.support.multidex&lt;/code&gt;，为何还会出错呢？ 原来是忘了继承&lt;code&gt;MultiDexApplication&lt;/code&gt;了！敲脑袋ing…&lt;/p&gt;
&lt;p&gt;接下来，我们借助官方文档来了解下64K方法数限制。&lt;/p&gt;
&lt;h3 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;&lt;strong&gt;正文&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;随着应用不断增加新功能，引入新库，apk会越来越大，到达一定规模后就可能遇到方法数超限问题。&lt;br&gt;早期版本错误信息如下：  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Conversion to Dalvik format failed:
Unable to execute dex: method ID not in [0, 0xffff]: 65536
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;较新版本错误信息如下：  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;trouble writing output:
Too many field references: 131000; max is 65536.
You may try using --multi-dex option.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中数字&lt;code&gt;65536&lt;/code&gt;是关键，Android平台的Java虚拟机Dalvik执行Dex程序时，使用的是short类型来索引DEX文件中的方法。这就意味着单个Dex文件可被引用的方法总数被限制为&lt;code&gt;64x1024&lt;/code&gt;, 即&lt;code&gt;65536&lt;/code&gt;。其中包括:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Framework的方法&lt;/li&gt;
&lt;li&gt;library的方法&lt;/li&gt;
&lt;li&gt;我们自己写的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为突破这个限制，需要使用multidex来生成多个dex文件。&lt;/p&gt;
&lt;h4 id=&quot;Android5-0-API-level-21-之前版本支持Multidex&quot;&gt;&lt;a href=&quot;#Android5-0-API-level-21-之前版本支持Multidex&quot; class=&quot;headerlink&quot; title=&quot;Android5.0 (API level 21)之前版本支持Multidex&quot;&gt;&lt;/a&gt;&lt;strong&gt;Android5.0 (API level 21)之前版本支持Multidex&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Android5.0之前使用Dalvik运行时执行应用代码，默认Dalvik限制每个apk只能有一个字节码&lt;code&gt;classed.dex&lt;/code&gt;文件。为突破这个限制，可以使用&lt;a href=&quot;https://developer.android.com/tools/support-library/features.html#multidex&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;multidex support library&lt;/a&gt;来管理额外的dex文件(包括代码)。&lt;/p&gt;
&lt;h4 id=&quot;Android5-0及更高版本支持Multidex&quot;&gt;&lt;a href=&quot;#Android5-0及更高版本支持Multidex&quot; class=&quot;headerlink&quot; title=&quot;Android5.0及更高版本支持Multidex&quot;&gt;&lt;/a&gt;&lt;strong&gt;Android5.0及更高版本支持Multidex&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Android5.0及更高版本使用支持从apk中加载多个dex文件的ART运行时机制，在应用安装时，加载classed(…N).dex文件并编译成一个&lt;code&gt;.oat&lt;/code&gt;文件以支持在Android设备上运行。关于Android 5.0运行时详见&lt;a href=&quot;https://source.android.com/devices/tech/dalvik/art.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ART介绍&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: While using &lt;a href=&quot;https://developer.android.com/tools/building/building-studio.html#instant-run&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Instant Run&lt;/a&gt;, Android Studio automatically configures your app for multidex when your app’s minSdkVersion is set to 21 or higher. Because Instant Run only works with the debug version of your app, you still need to configure your release build for multidex to avoid the 64K limit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果使用&lt;a href=&quot;https://developer.android.com/tools/building/building-studio.html#instant-run&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Instant Run&lt;/a&gt;，当app的&lt;code&gt;minSdkVersion&lt;/code&gt;大于或等于&lt;code&gt;21&lt;/code&gt;时，Android Studio会自动配置支持multidex，但是仅&lt;code&gt;debug&lt;/code&gt;版本有效，&lt;code&gt;release&lt;/code&gt;版仍然需要配置multidex来突破64K限制。&lt;/p&gt;
&lt;h4 id=&quot;避免64K限制&quot;&gt;&lt;a href=&quot;#避免64K限制&quot; class=&quot;headerlink&quot; title=&quot;避免64K限制&quot;&gt;&lt;/a&gt;&lt;strong&gt;避免64K限制&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;在配置multidex之前，你或许可以通过以下方法来减小方法总数(包括引用的、library里的和自己写的方法)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;排除未使用的依赖&lt;/strong&gt; -此步骤通常能有效避免64K限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用ProGuard去除未使用的方法&lt;/strong&gt; -为release版本配置&lt;a href=&quot;https://developer.android.com/tools/help/proguard.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ProGuard&lt;/a&gt;，能有效排除一些无用方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用以上技术能有效避免更改构建配置来引用更多的方法，同时能减小apk大小，使用户消耗更少的流量。&lt;/p&gt;
&lt;h4 id=&quot;使用Gradle配置Multidex&quot;&gt;&lt;a href=&quot;#使用Gradle配置Multidex&quot; class=&quot;headerlink&quot; title=&quot;使用Gradle配置Multidex&quot;&gt;&lt;/a&gt;&lt;strong&gt;使用Gradle配置Multidex&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Android SDK Build Tools 21.1或更高版本上支持multidex，确定要配置multidex前请确保&lt;code&gt;Android SDK Build Tools&lt;/code&gt;和&lt;code&gt;Android Support Repository&lt;/code&gt;更新到较新版本。  &lt;/p&gt;
&lt;p&gt;通过以下步骤配置multidex:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更改Gradle配置来支持multidex&lt;/li&gt;
&lt;li&gt;修改manifest。使其支持multidexapplication类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;修改模块级builde.gradle文件，修改如下:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android {
    compileSdkVersion 21
    buildToolsVersion &amp;quot;21.1.0&amp;quot;

    defaultConfig {
        ...
        minSdkVersion 14
        targetSdkVersion 21
        ...

        // Enabling multidex support.
        multiDexEnabled true
    }
    ...
}

dependencies {
  compile &amp;apos;com.android.support:multidex:1.0.0&amp;apos;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;在manifest文件中，添加MultidexApplication Class的引用，如下:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;manifest xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    package=&amp;quot;com.example.android.multidex.myapplication&amp;quot;&amp;gt;
    &amp;lt;application
        ...
        android:name=&amp;quot;android.support.multidex.MultiDexApplication&amp;quot;&amp;gt;
        ...
    &amp;lt;/application&amp;gt;
&amp;lt;/manifest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过以上步骤即可支持multidex。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: If your app uses extends the Application class, you can override the attachBaseContext() method and call MultiDex.install(this) to enable multidex. For more information, see the MultiDexApplication reference documentation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你的应用中已经继承Application，那么可以通过复写&lt;code&gt;attachBaseContext()&lt;/code&gt;方法并调用&lt;code&gt;MultiDex.install(this)&lt;/code&gt;来支持multidex，即无需修改manifest文件。更多信息请看&lt;a href=&quot;https://developer.android.com/reference/android/support/multidex/MultiDexApplication.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MultiDexApplication&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;补充:&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;亦可直接将继承&lt;code&gt;Application&lt;/code&gt; 改为继承&lt;code&gt;MultiDexApplication&lt;/code&gt;，而无需修改manifest文件或复写&lt;code&gt;attachBaseContext()&lt;/code&gt;方法。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;multidex-support-library的使用限制&quot;&gt;&lt;a href=&quot;#multidex-support-library的使用限制&quot; class=&quot;headerlink&quot; title=&quot;multidex support library的使用限制&quot;&gt;&lt;/a&gt;&lt;strong&gt;multidex support library的使用限制&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;multidex support library&lt;/code&gt;有一些已知的限制请务必知晓，需要在应用时先行测试。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果classes2.dex文件较大，安装dex文件到设备的数据区是一个复杂的过程，可能会导致应用程序无响应(ANR)的错误。在这种情况下，应该使用ProGuard尽量减小dex文件的大小且删除无用的代码。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在Android 4.0（API Level 14）之前，由于Dalvik linearalloc bug（问题&lt;a href=&quot;http://b.android.com/22586&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;22586&lt;/a&gt;），multidex可能是运行失败。如果希望运行在Level 14之前的Android系统版本，请先确保完整的测试和使用。优化代码可以减少或可能消除这些潜在的问题。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用程序使用了multiedex配置，会造成申请很大的内存分配。可能还会引起Dalvik虚拟机的崩溃(问题&lt;a href=&quot;http://b.android.com/78035&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;78035&lt;/a&gt;)。此分配限制是在Android 4.0 (API level 14)上增加的，但Android5.0 (API level 21)之前的版本仍有此限制。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;multidex构建工具不支持指定哪些类必须包含在首个dex文件中，因而可能导致某些library无法使用。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;优化Multidex的开发和构建&quot;&gt;&lt;a href=&quot;#优化Multidex的开发和构建&quot; class=&quot;headerlink&quot; title=&quot;优化Multidex的开发和构建&quot;&gt;&lt;/a&gt;&lt;strong&gt;优化Multidex的开发和构建&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;multidex会加长构建应用的时间，这个必要的过程可能会拖慢你的开发进度。&lt;br&gt;为加速构建过程，我们可以在Gradle中配置&lt;a href=&quot;http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Product-flavors&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;productFlavors&lt;/a&gt;: &lt;code&gt;a development flavor and a production flavor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;开发时将&lt;code&gt;minSdkVersion&lt;/code&gt;改为&lt;code&gt;21&lt;/code&gt;使用ART运行时机制，这样能加快构建速度。release时改为合适的&lt;code&gt;minSdkVersion&lt;/code&gt;，这样仅在release时费时较长。&lt;/p&gt;
&lt;p&gt;build.gradle配置如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android {
    productFlavors {
        // Define separate dev and prod product flavors.
        dev {
            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion 21
        }
        prod {
            // The actual minSdkVersion for the application.
            minSdkVersion 14
        }
    }
          ...
    buildTypes {
        release {
            runProguard true
            proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;),
                                                 &amp;apos;proguard-rules.pro&amp;apos;
        }
    }
}
dependencies {
  compile &amp;apos;com.android.support:multidex:1.0.0&amp;apos;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完成上述配置后，你可以使用结合了&lt;code&gt;dev productFlavor&lt;/code&gt;和&lt;code&gt;buildType&lt;/code&gt;属性的&lt;code&gt;devDebug&lt;/code&gt;变体app。&lt;br&gt;这个变体app包含如下特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭了混淆(proguard)&lt;/li&gt;
&lt;li&gt;支持multidex&lt;/li&gt;
&lt;li&gt;minSdkVersion 设置为 Android API level 21.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些设置将使Gradle插件做如下事情:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译应用的每个模块(包括依赖)为独立的dex文件，这个过程称为&lt;code&gt;pre-dexing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不作修改地include每个dex文件到apk里&lt;/li&gt;
&lt;li&gt;更重要的是，这些模块dex文件将不会合并，这样避免分割主dex文件，以加快速度&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;值得注意的是：&lt;strong&gt;上述配置后的devDebug变种app仅能运行在Android 5.0设备上&lt;/strong&gt;。  &lt;/p&gt;
&lt;p&gt;同时，你也可以构建其他变体app，也可以在终端使用gradel命令来实现多渠道打包等。更多有关&lt;code&gt;flavors&lt;/code&gt;和&lt;code&gt;Gradle tasks&lt;/code&gt;信息, 请看&lt;a href=&quot;http://avatarqing.github.io/Gradle-Plugin-User-Guide-Chinese-Verision&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Plugin User Guide(中文翻译)&lt;/a&gt;.  &lt;/p&gt;
&lt;h4 id=&quot;在Android-Studio中构建变种App&quot;&gt;&lt;a href=&quot;#在Android-Studio中构建变种App&quot; class=&quot;headerlink&quot; title=&quot;在Android Studio中构建变种App&quot;&gt;&lt;/a&gt;&lt;strong&gt;在Android Studio中构建变种App&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;使用multidex时，构建变体app对管理构建过程是非常有用的。Android studio允许用户自己选择。  &lt;/p&gt;
&lt;p&gt;在Android Studio中构建变体app，步骤如下:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从左边栏打开&lt;code&gt;Build Variants&lt;/code&gt;窗口&lt;/li&gt;
&lt;li&gt;点击&lt;code&gt;build variant&lt;/code&gt;以选择不同变体，如图:&lt;br&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:15/studio-build-variant.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;测试Multidex应用&quot;&gt;&lt;a href=&quot;#测试Multidex应用&quot; class=&quot;headerlink&quot; title=&quot;测试Multidex应用&quot;&gt;&lt;/a&gt;&lt;strong&gt;测试Multidex应用&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;测试multidex应用，需在&lt;code&gt;build.gradle&lt;/code&gt;中配置&lt;a href=&quot;https://developer.android.com/reference/com/android/test/runner/MultiDexTestRunner.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MultiDexTestRunner&lt;/a&gt;:  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android {
  defaultConfig {
      ...
      testInstrumentationRunner &amp;quot;com.android.test.runner.MultiDexTestRunner&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;Note: With Android Plugin for Gradle versions lower than 1.1, you need to add the following dependency for multidex-instrumentation:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若Gradle插件版本低于1.1，你还需添加&lt;code&gt;multidex-instrumentation&lt;/code&gt;依赖:  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dependencies {
    androidTestCompile(&amp;apos;com.android.support:multidex-instrumentation:1.0.1&amp;apos;) {
         exclude group: &amp;apos;com.android.support&amp;apos;, module: &amp;apos;multidex&amp;apos;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;备注：文中链接为官方链接，请爬墙观看！&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;center&gt;原创文章，欢迎转载，转载请注明出处&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;center&gt;我的简书账号是ConnorLin，欢迎光临！&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;前几天，开发中遇到一个问题，Log信息如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;E/AndroidRuntime(10943): FATAL EXCEPTION: main
E/AndroidRuntime(10943): Process: com.freeme.gallery, PID: 10943
E/AndroidRuntime(10943): java.lang.NoClassDefFoundError: com.freeme.gallery.data.DataManager$DateTakenComparator
E/AndroidRuntime(10943):     at com.freeme.gallery.data.DataManager.&amp;lt;clinit&amp;gt;(DataManager.java:65)
E/AndroidRuntime(10943):     at com.freeme.gallery.app.GalleryAppImpl.getDataManager(GalleryAppImpl.java:77)
E/AndroidRuntime(10943):     at com.freeme.gallery.provider.GalleryProvider.onCreate(GalleryProvider.java:101)
E/AndroidRuntime(10943):     at android.content.ContentProvider.attachInfo(ContentProvider.java:1656)
E/AndroidRuntime(10943):     at android.content.ContentProvider.attachInfo(ContentProvider.java:1627)
E/AndroidRuntime(10943):     at android.app.ActivityThread.installProvider(ActivityThread.java:5060)
E/AndroidRuntime(10943):     at android.app.ActivityThread.installContentProviders(ActivityThread.java:4634)
E/AndroidRuntime(10943):     at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4567)
E/AndroidRuntime(10943):     at android.app.ActivityThread.access$1500(ActivityThread.java:153)
E/AndroidRuntime(10943):     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1404)
E/AndroidRuntime(10943):     at android.os.Handler.dispatchMessage(Handler.java:110)
E/AndroidRuntime(10943):     at android.os.Looper.loop(Looper.java:193)
E/AndroidRuntime(10943):     at android.app.ActivityThread.main(ActivityThread.java:5351)
E/AndroidRuntime(10943):     at java.lang.reflect.Method.invokeNative(Native Method)
E/AndroidRuntime(10943):     at java.lang.reflect.Method.invoke(Method.java:515)
E/AndroidRuntime(10943):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:835)
E/AndroidRuntime(10943):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:651)
E/AndroidRuntime(10943):     at dalvik.system.NativeStart.main(Native Method)
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Android" scheme="https://github.com/ConnorLin/categories/Android/"/>
    
    
      <category term="Android multidex 分包 NoClassDefFoundError" scheme="https://github.com/ConnorLin/tags/Android-multidex-%E5%88%86%E5%8C%85-NoClassDefFoundError/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo＋Github Pages 来搭建免费的专属博客</title>
    <link href="https://github.com/ConnorLin/2016/04/02/%E4%BD%BF%E7%94%A8Hexo%EF%BC%8BGithub%20Pages%20%E6%9D%A5%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2/"/>
    <id>https://github.com/ConnorLin/2016/04/02/使用Hexo＋Github Pages 来搭建免费的专属博客/</id>
    <published>2016-04-02T14:33:20.000Z</published>
    <updated>2016-04-28T13:17:43.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、简介&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;&lt;/a&gt;Hexo&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;是一个开源的静态博客框架,基于node.js开发,作者是台湾大学生tommy351。&lt;/p&gt;
&lt;h4 id=&quot;Github&quot;&gt;&lt;a href=&quot;#Github&quot; class=&quot;headerlink&quot; title=&quot;Github&quot;&gt;&lt;/a&gt;Github&lt;/h4&gt;&lt;p&gt;如果是程序员肯定知道，&lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt;是开源代码库以及版本控制系统。在GitHub，用户可以十分轻易地找到海量的开源代码。&lt;/p&gt;
&lt;h4 id=&quot;Github-Pages&quot;&gt;&lt;a href=&quot;#Github-Pages&quot; class=&quot;headerlink&quot; title=&quot;Github Pages&quot;&gt;&lt;/a&gt;Github Pages&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/what-are-github-pages/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github Pages&lt;/a&gt;可以理解为用户编写的、托管在github上的静态网页，你只需将你的改动提交到Github，就可以实现更改你的网页。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;二、基础环境配置&quot;&gt;&lt;a href=&quot;#二、基础环境配置&quot; class=&quot;headerlink&quot; title=&quot;二、基础环境配置&quot;&gt;&lt;/a&gt;&lt;strong&gt;二、基础环境配置&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;安装Node&quot;&gt;&lt;a href=&quot;#安装Node&quot; class=&quot;headerlink&quot; title=&quot;安装Node&quot;&gt;&lt;/a&gt;安装Node&lt;/h4&gt;&lt;p&gt;从&lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;官网下载对应的版本安装即可。&lt;br&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:02/download_Node.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装Git&quot;&gt;&lt;a href=&quot;#安装Git&quot; class=&quot;headerlink&quot; title=&quot;安装Git&quot;&gt;&lt;/a&gt;安装Git&lt;/h4&gt;&lt;p&gt;从&lt;a href=&quot;https://git-scm.com/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;官网下载对应版本安装即可。&lt;br&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:02/download_git.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h4&gt;&lt;p&gt;Node和Git都安装完毕后，在任意路径下新建一个文件夹(随意命名)，如Hexo，作为你的博客专属路径，用于存放Hexo相关配置信息，之后终端进入到此路径并分别执行如下命令来安装和初始化Hexo&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo npm install-g hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;至此，可以使用Hexo了，我们来实验一下。&lt;/p&gt;
&lt;p&gt;分别执行如下命令来生成一个静态网页并启动本地服务来预览你的初始博客，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo generate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者简写&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;初始化后文件结构如图:&lt;br&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:02/hexo_content.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图，启动本地服务后，即可在浏览器输入&lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000&lt;/a&gt; 来预览博客啦！&lt;br&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:02/hexo_server.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;三、配置GitHub&quot;&gt;&lt;a href=&quot;#三、配置GitHub&quot; class=&quot;headerlink&quot; title=&quot;三、配置GitHub&quot;&gt;&lt;/a&gt;三、配置GitHub&lt;/h3&gt;&lt;p&gt;首先你得有个Github帐号，到&lt;a href=&quot;https://github.com&quot;&gt;https://github.com&lt;/a&gt; 上注册个帐号，至于如何注册，相信你会的。&lt;/p&gt;
&lt;h4 id=&quot;绑定Git-amp-Github&quot;&gt;&lt;a href=&quot;#绑定Git-amp-Github&quot; class=&quot;headerlink&quot; title=&quot;绑定Git &amp;amp; Github&quot;&gt;&lt;/a&gt;绑定Git &amp;amp; Github&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//Github用户名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &amp;quot;ConnorLin&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//注册Github的邮箱&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email  &amp;quot;your_email@example.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;创建博客仓库&quot;&gt;&lt;a href=&quot;#创建博客仓库&quot; class=&quot;headerlink&quot; title=&quot;创建博客仓库&quot;&gt;&lt;/a&gt;创建博客仓库&lt;/h4&gt;&lt;p&gt;注册帐号后，点➕来创建一个repository，该仓库必须以 &lt;strong&gt;“your_user_name.github.io”&lt;/strong&gt; 的格式命名&lt;br&gt;&lt;img src=&quot;https://github.com/ConnorLin/BlogImages/raw/master/2016:04:02/create_github_repository.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;配置SSH-Key&quot;&gt;&lt;a href=&quot;#配置SSH-Key&quot; class=&quot;headerlink&quot; title=&quot;配置SSH Key&quot;&gt;&lt;/a&gt;配置SSH Key&lt;/h4&gt;&lt;p&gt;首先查看本地是否已经有SSH Key, 终端输入如下命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd ~/.ssh;ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果存在id_ras.pub，说明已经有SSH Key，否则需要重新创建。&lt;br&gt;使用如下命令生成密钥&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t rsa -C &amp;quot;your_email@example.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;按提示分别输入Key文件保存路径和密码(可以为空)，完成会有如下提示即表示创建成功&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;The key fingerprint is:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;01:0a:f6:3c:ca:95:d6:17:a1:7d:f0:65:9d:f0:a2:db your_email@example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将SSH Key添加到ssh-agent:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;eval &amp;quot;$(ssh-agent -s)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh-add ~/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;添加SSH-Key到Github账户&quot;&gt;&lt;a href=&quot;#添加SSH-Key到Github账户&quot; class=&quot;headerlink&quot; title=&quot;添加SSH Key到Github账户&quot;&gt;&lt;/a&gt;添加SSH Key到Github账户&lt;/h4&gt;&lt;p&gt;1、复制ssh key内容&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pbcopy &amp;lt; ~/.ssh/id_rsa.pub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2、点击Github账户头像，点击设置进入Github设置&lt;br&gt;&lt;img src=&quot;https://help.github.com/assets/images/help/settings/userbar-account-settings.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3、点击左边的SSH and GPG Keys&lt;br&gt;&lt;img src=&quot;https://help.github.com/assets/images/help/settings/settings-sidebar-ssh-keys.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;4、添加SSH Key, 填写刚刚复制的密钥内容&lt;br&gt;&lt;img src=&quot;https://help.github.com/assets/images/help/settings/ssh-key-paste.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;测试SSH连接&quot;&gt;&lt;a href=&quot;#测试SSH连接&quot; class=&quot;headerlink&quot; title=&quot;测试SSH连接&quot;&gt;&lt;/a&gt;测试SSH连接&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh -T git@github.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果有如下提示：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;The authenticity of host &amp;apos;github.com (192.30.252.1)&amp;apos; can&amp;apos;t be established.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RSA key fingerprint is nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Are you sure you want to continue connecting (yes/no)?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输入yes即可&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hi username! You&amp;apos;ve successfully authenticated, but GitHub does not provide shell access.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;四、关联Hexo-和-Github&quot;&gt;&lt;a href=&quot;#四、关联Hexo-和-Github&quot; class=&quot;headerlink&quot; title=&quot;四、关联Hexo 和 Github&quot;&gt;&lt;/a&gt;&lt;strong&gt;四、关联Hexo 和 Github&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;配置Hexo&quot;&gt;&lt;a href=&quot;#配置Hexo&quot; class=&quot;headerlink&quot; title=&quot;配置Hexo&quot;&gt;&lt;/a&gt;配置Hexo&lt;/h4&gt;&lt;p&gt;进入博客根路径，打开_config.yml，拉到最后，修改如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//注意冒号后面有空格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repository: git@github.com:ConnorLin/Connorlin.github.io.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  branch: master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装Hexo-git插件&quot;&gt;&lt;a href=&quot;#安装Hexo-git插件&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo git插件&quot;&gt;&lt;/a&gt;安装Hexo git插件&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-git --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;将博客部署到Github&quot;&gt;&lt;a href=&quot;#将博客部署到Github&quot; class=&quot;headerlink&quot; title=&quot;将博客部署到Github&quot;&gt;&lt;/a&gt;将博客部署到Github&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至此，在浏览器输入博客地址 &lt;a href=&quot;http://connorlin.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://connorlin.github.io&lt;/a&gt;  就可以访问博客啦！&lt;/p&gt;
&lt;h3 id=&quot;五、Hexo常用命令&quot;&gt;&lt;a href=&quot;#五、Hexo常用命令&quot; class=&quot;headerlink&quot; title=&quot;五、Hexo常用命令&quot;&gt;&lt;/a&gt;&lt;strong&gt;五、Hexo常用命令&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;1、新建文章&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new [template] &amp;quot;Title&amp;quot;  //新建标题为Title的文章&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中template是可选参数，我称之为文章模板，默认值为post。scaffolds路径下的文件就是模板文件，你可以新建或编辑现有模板。&lt;br&gt;执行命令后，在source/_posts/下会生成Title.md文件，当然，也可以手动创建后缀为“.md”的文件，并用喜欢的markdown编辑器编辑。&lt;/p&gt;
&lt;p&gt;2、新建页面&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;heox new page &amp;quot;Page Title&amp;quot;  //新建页面&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3、生成静态页面至public目录&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo generate   //生成静态页面&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4、本地预览&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo server //启动本地服务，Ctrl＋C关闭&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;5、部署到Github&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy     //将博客部署到Github&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;6、清理已经生成的静态文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo clean&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;六、美化&quot;&gt;&lt;a href=&quot;#六、美化&quot; class=&quot;headerlink&quot; title=&quot;六、美化&quot;&gt;&lt;/a&gt;&lt;strong&gt;六、美化&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;美化自然离不开主题，Hexo主题花样繁多，可以在&lt;a href=&quot;https://github.com/hexojs/hexo/wiki/Themes&quot;&gt;Hexo_Themes&lt;/a&gt;找到你中意的主题。&lt;br&gt;试过几种主题，个人比较中意&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot;&gt;Yilia&lt;/a&gt;和&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt;Next&lt;/a&gt;这两款主题，本文主题使用的是Next。&lt;br&gt;Next有&lt;a href=&quot;http://theme-next.iissnan.com/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方教程&lt;/a&gt;，讲解非常详细，包括添加评论、搜索等一应俱全，此处不再赘述。&lt;br&gt;至于如何应用主题，步骤大同小异，此处以next为例：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//进入博客根目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cd your-hexo-site&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//从Github上克隆主题到你博客theme里&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git clone https://github.com/iissnan/hexo-theme-next themes/next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后打开根目录下的_config.yml文件，将theme的值改为主题名字：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;theme: next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置完毕，此时可以启动本地服务&lt;a href=&quot;http://0.0.0.0:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:4000/&lt;/a&gt; 来预览主题了。&lt;/p&gt;
&lt;h3 id=&quot;七、写作&quot;&gt;&lt;a href=&quot;#七、写作&quot; class=&quot;headerlink&quot; title=&quot;七、写作&quot;&gt;&lt;/a&gt;&lt;strong&gt;七、写作&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;Markdown&quot;&gt;&lt;a href=&quot;#Markdown&quot; class=&quot;headerlink&quot; title=&quot;Markdown&quot;&gt;&lt;/a&gt;Markdown&lt;/h4&gt;&lt;p&gt;写博客当然用&lt;a href=&quot;http://baike.baidu.com/link?url=DvOYkleFP_7nOskTAceJwrEJ2B__4yHl-Q-gY-X9wktKgK4zEEj52jPg52K-mFQBFUPgV8tZrk4A3vDVd-Olga&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown&lt;/a&gt;，目前mardkdown工具有很多，找到适合自己的还是要花点时间的，参考&lt;a href=&quot;http://www.williamlong.info/archives/4319.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;好用的Markdown编辑器一览&lt;/a&gt;找到你中意的吧。&lt;br&gt;作为一名程序猿，当然选择Sublime Text来装bility啦！&lt;br&gt;1、安装Package Control插件&lt;br&gt;　　详见&lt;a href=&quot;https://packagecontrol.io/installation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方教程&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;2、打开Package Control&lt;br&gt;　　按快捷键 Shift ＋ command(Ctrl) ＋ P -&amp;gt; 输入install -&amp;gt; 选择Install Package&lt;br&gt;稍等一会(左下角进度)，就可以安装你想要的插件啦！  &lt;/p&gt;
&lt;p&gt;3、安装插件&lt;br&gt;　　输入插件名，回车即可安装，插件请参考&lt;a href=&quot;http://www.jianshu.com/p/aa30cc25c91b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sublime插件：Markdown篇&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;4、开始用Sublime Text写博客吧～&lt;/p&gt;
&lt;h4 id=&quot;图床&quot;&gt;&lt;a href=&quot;#图床&quot; class=&quot;headerlink&quot; title=&quot;图床&quot;&gt;&lt;/a&gt;&lt;strong&gt;图床&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;开始写博客才知道&lt;a href=&quot;http://baike.baidu.com/link?url=Fd0VLDqD_mmaS5r_ibrwjyCp1WcGkgmKPzKWg5U652XMWBo5Aqgn1rJNClZ1akjzYZV8f-M1PDQ0EdgvkIpFxq&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图床&lt;/a&gt;，为了博客稳定，需要选择一个可靠且免费的图床，推荐&lt;a href=&quot;https://portal.qiniu.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;七牛&lt;/a&gt;，有10G免费空间，仅做图床足矣。但是七牛现在注册需要实名，这点比较令人纠结。&lt;br&gt;所以我更推荐以强大的Github为免费图床，虽然麻烦点，但稳定安心！！！&lt;br&gt;1、添加博客图片专用Repository，如BlogImages，这样有利于维护；&lt;br&gt;2、发布博客前，将博客中用到的图片push到BlogImages；&lt;br&gt;3、从Github里获取图片地址，如何获取我想你会的；&lt;br&gt;&lt;strong&gt;4、将地址中的blob替换为raw，必须替换，否则无法显示图片&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;如  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;“https://github.com/ConnorLin/BlogImages/blob/master/2016:04:02/hexo_server.png”  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;改为  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;“https://github.com/ConnorLin/BlogImages/raw/master/2016:04:02/hexo_server.png”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;5、将修改后的地址用于博客即可，大功告成！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;至此，博客基础框架搭建完毕，Enjoy it！&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;1、&lt;a href=&quot;http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo你的博客&lt;/a&gt;&lt;br&gt;2、&lt;a href=&quot;http://www.jianshu.com/p/465830080ea9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HEXO+Github,搭建属于自己的博客&lt;/a&gt;&lt;br&gt;3、&lt;a href=&quot;https://help.github.com/categories/github-pages-basics/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github Help&lt;/a&gt;&lt;br&gt;4、&lt;a href=&quot;http://www.jianshu.com/p/15ae47eddc56&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;小白独立搭建博客–Github Pages和Hexo简明教程&lt;/a&gt;&lt;br&gt;5、&lt;a href=&quot;http://www.jianshu.com/p/aa30cc25c91b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sublime插件：Markdown篇&lt;/a&gt;&lt;br&gt;6、&lt;a href=&quot;http://jingpin.jikexueyuan.com/article/36279.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;迁移博客图片者的福音：使用GitHub做免费不限流量图床&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;center&gt;原创文章，欢迎转载，转载请注明出处&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;center&gt;我的简书账号是ConnorLin，欢迎光临！&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、简介&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;&lt;/a&gt;Hexo&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/docs/&quot;&gt;Hexo&lt;/a&gt;是一个开源的静态博客框架,基于node.js开发,作者是台湾大学生tommy351。&lt;/p&gt;
&lt;h4 id=&quot;Github&quot;&gt;&lt;a href=&quot;#Github&quot; class=&quot;headerlink&quot; title=&quot;Github&quot;&gt;&lt;/a&gt;Github&lt;/h4&gt;&lt;p&gt;如果是程序员肯定知道，&lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt;是开源代码库以及版本控制系统。在GitHub，用户可以十分轻易地找到海量的开源代码。&lt;/p&gt;
&lt;h4 id=&quot;Github-Pages&quot;&gt;&lt;a href=&quot;#Github-Pages&quot; class=&quot;headerlink&quot; title=&quot;Github Pages&quot;&gt;&lt;/a&gt;Github Pages&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/what-are-github-pages/&quot;&gt;Github Pages&lt;/a&gt;可以理解为用户编写的、托管在github上的静态网页，你只需将你的改动提交到Github，就可以实现更改你的网页。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://github.com/ConnorLin/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo GitHub Pages Git" scheme="https://github.com/ConnorLin/tags/hexo-GitHub-Pages-Git/"/>
    
  </entry>
  
</feed>
